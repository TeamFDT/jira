/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.audio.Mp3Player * Version 	  	: 1 * Description 	: Mp3 Player *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti  * Date 			: 16/01/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *	play( url:String ) : void *	pause():void *	resume():void *	seek( percent:Number ):void *	prev():void *	next():void *	startPlayList():void * * PROPERTIES *  *	laying() : Boolean * 	playlist() : Array * 	currentUrl() : String * 	playlistIndex() : int * 	soundTrans() : SoundTransform * 	volume():Number * 	pan():Number * 	length():Number * 	time():Number * 	timePercent():Number * * EVENTS *  *	Mp3PlayerEvent.TIME_CHANGE *	 *				Mp3PlayerEvent.playPercent 	( get / set ); *				Mp3PlayerEvent.totalTime 	( get / set ); *				Mp3PlayerEvent.currentTime 	( get / set ); *  *	Mp3PlayerEvent.VOLUME_CHANGE *	Mp3PlayerEvent.PAN_CHANGE *	Mp3PlayerEvent.PAUSE *	Mp3PlayerEvent.RESUME *	Mp3PlayerEvent.PLAY *	Mp3PlayerEvent.COMPLETE *	Mp3PlayerEvent.ID3 *	 *			Mp3PlayerEvent.id3 ( get / set ); *  ******************************************************************************************************************************************************************************** **********************************************************************************************************************************************************************************/package com.kurst.controls.audio {		import com.kurst.events.LoadEvent;	import com.kurst.events.Mp3PlayerEvent;	import com.kurst.utils.FDelayCall;	import flash.display.Sprite;	import flash.errors.IOError;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.utils.Timer;	public class Mp3Player extends Sprite {				//------------------------------------------------------------------------------------------------------------------------------------------------------------				private var _playing 			: Boolean;		private var _pausedAt 			: Number;		private var _playlist 			: Array;		private var _currentUrl 		: String;		private var _playlistIndex 		: int = -1;		private var progressTimer 		: Timer		private var progressTimerDelay 	: Number = 25;		private var previousVolume 		: Number;		private var scl 				: SoundLoaderContext		private var _buffer 			: Number = 2000		//------------------------------------------------------------------------------------------------------------------------------------------------------------				protected var sound 			: Sound;		protected var soundChannel 		: SoundChannel;		protected var _soundTrans 		: SoundTransform;		protected var progressInt 		: Number;		//------------------------------------------------------------------------------------------------------------------------------------------------------------		public function Mp3Player() {						super();			// Set Default Buffer			scl = new SoundLoaderContext(_buffer);			// Progress Timer			progressTimer = new Timer(progressTimerDelay);			progressTimer.addEventListener( TimerEvent.TIMER , updateProgress , false , 0 , true );					}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method playSongByID( id:Number ):Boolean		 * @tooltip play a song from the playlist - use the id of the song ( position of song in the playlist array )		 * @param id : Number - id of the song to play ( position of the song in the array )		 * @return boolean - true if successfull		 */		public function playSongByID(id : Number) : Boolean {						// Set the playlist index			playlistIndex = id;			// Check it is withing range - if not - return flaase			if ( playlistIndex < 0 ) return false			if ( playlistIndex == playlist.length ) return false			// Play the Song			play(playlist[playlistIndex]);			return true;					}		/**		 * @method play( url:String )		 * @tooltip play an mp3 file		 * @param url:String - url of mp3 to stream		 */		public function play(url : String) : void {						progressTimer.stop();			if ( sound != null ) {				// Reset event listeners				sound.removeEventListener(Event.COMPLETE, onSongLoaded);				sound.removeEventListener(Event.ID3, onId3Info);				sound.removeEventListener(ProgressEvent.PROGRESS, onLoadProgress)				// When a sound is loading the netstream object is active so close it				// if its loaded - then it throws an error;				try {					sound.close();				} catch (error : IOError) { }							}			// ------------------------------------------------------------------------------------			// TRICKY - Every time we pause resume the stream flash returns a NEW sound channel			// so we need to re-add the COMPLETE event listener;			sound = new Sound();			sound.addEventListener(Event.COMPLETE, onSongLoaded, false, 0, true);			sound.addEventListener(Event.ID3, onId3Info, false, 0, true);			sound.addEventListener(ProgressEvent.PROGRESS, onLoadProgress, false, 0, true)			// If we have a sound channel			if ( soundChannel != null ) {								// Stop the current sound and remove event listeners				soundChannel.stop();				soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSongEnd);							}			// Store the current URL			_currentUrl = url;			// Load the new sound			sound.load(new URLRequest(currentUrl), scl);			// Reference the sound channer			soundChannel = sound.play()			// Add the complete listener			soundChannel.addEventListener(Event.SOUND_COMPLETE, onSongEnd, false, 0, true);			_playing = true;			// Store / Restore the sound transform			if ( soundTrans ) {				// Restore the sound transform				soundChannel.soundTransform = soundTrans;			} else {				soundTrans = soundChannel.soundTransform;			}			// store the sound transform			dispatchEvent(new Mp3PlayerEvent(Mp3PlayerEvent.PLAY))			progressTimer.start();					}		/**		 * @method pause()		 * @tooltip pause a playing stream		 */		public function pause() : void {						// make sure we are only pausing a sound when its playing -			// or when a sound is actually loaded.			if ( _currentUrl != null && _playing ) {				// Paused audio position				_pausedAt = soundChannel.position;				// Pause the sound				soundChannel.stop();				dispatchEvent(new Mp3PlayerEvent(Mp3PlayerEvent.PAUSE));				_playing = false;				progressTimer.stop();			}					}		/**		 * @method resume():void 		 * @tooltip resume a paused stream		 * @param N.A		 */		public function resume() : void {						// if the sound is playing - no point in resuming anything			if ( _playing ) return;			// TRICKY - See note below			if ( soundChannel != null )				soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSongEnd);			// Check the sound positiion is within range			if ( soundChannel.position < sound.length ) {								// Resume the sound - and get the new sound channel				soundChannel = sound.play(soundChannel.position);				soundChannel.soundTransform = soundTrans;							} else { soundChannel = sound.play(); }			// Start the sound			// ------------------------------------------------------------------------------------			// TRICKY - Every time we pause resume the stream flash returns a new sound channel			// so we need to re-add the SOUND_COMPLETE event listener;			soundChannel.addEventListener(Event.SOUND_COMPLETE, onSongEnd, false, 0, true);			dispatchEvent(new Mp3PlayerEvent(Mp3PlayerEvent.RESUME));			_playing = true;			progressTimer.start();					}		/**		 * @method seek( percent:Number ):void		 * @tooltip seek the mp3 stream		 * @param percent ( 0-1 )		 */		public function seek(percent : Number) : void {						previousVolume = volume			// ------------------------------------------------------------------------------------			// TRICKY - See note below			if ( soundChannel != null )				soundChannel.removeEventListener(Event.SOUND_COMPLETE, onSongEnd);			soundChannel.stop();			soundChannel = sound.play(sound.length * percent);			if ( soundTrans ) {								soundChannel.soundTransform = soundTrans;							} else {								soundTrans = soundChannel.soundTransform;							}			// ------------------------------------------------------------------------------------			// TRICKY - Every time we pause resume the stream flash returns a new sound channel			// so we need to re-add the COMPLETE event listener;			soundChannel.addEventListener(Event.SOUND_COMPLETE, onSongEnd, false, 0, true);			// If the audio stream is paused -			// Mute the sound - and pause after a delay (			if ( !_playing ) {								volume = 0;				FDelayCall.addCall(DelayPause, this)							}			updateProgress();		}		/**		 * @method prev()		 * @tooltip play the previous item in the playlist		 */		public function prev() : void {						playlistIndex--;			if ( playlistIndex < 0 ) playlistIndex = playlist.length - 1;			play(playlist[playlistIndex]);					}		/**		 * @method next()		 * @tooltip play the next song in the playlist		 */		public function next() : void {						playlistIndex++;			if ( playlistIndex == playlist.length ) playlistIndex = 0;			play(playlist[playlistIndex]);					}		/**		 * @method startPlayList()		 * @tooltip start playing the playlist		 */		public function startPlayList() : void {						play(playlist[playlistIndex]);					}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method DelayPause		 * @tooltip delayed function to pause the current stream ( see pause )		 */		public function DelayPause() : void {			volume = previousVolume;			pause();		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method playing		 * @tooltip return boolean depending on whether the current stream is playing		 * @return boolean		 */		public function get playing() : Boolean {			return _playing;		}		public function set playing(playing : Boolean) : void {			_playing = playing;		}		/**		 * @method playlist		 * @tooltip get the playlist array		 * @param  Array		 * @return Array		 */		public function get playlist() : Array {			return _playlist;		}		public function set playlist(playlist : Array) : void {			playlistIndex = 0;			_playlist = playlist;		}		/**		 * @method currentUrl		 * @tooltip get the url of the current song.		 * @param string		 * @return string		 */		public function get currentUrl() : String {			return _currentUrl;		}		public function set currentUrl(currentUrl : String) : void {			_currentUrl = currentUrl;		}		/**		 * @method playlistIndex		 * @tooltip get the current play list index ( position of the song currently playing )/		 * @param int		 * @return int		 */		public function get playlistIndex() : int {			return _playlistIndex;		}		public function set playlistIndex(playlistIndex : int) : void {			_playlistIndex = playlistIndex;		}		/**		 * @method soundTrans		 * @tooltip get / set the sound transform		 * @param SoundTransform		 * @return SoundTransform		 */		public function get soundTrans() : SoundTransform {			return _soundTrans;		}		public function set soundTrans(soundTrans : SoundTransform) : void {			_soundTrans = soundTrans;		}		/**		 * @method volume		 * @tooltip get / set the volume		 * @param Number		 * @return Number		 */		public function get volume() : Number {						if (!soundTrans) return 0;			return soundTrans.volume;					}		public function set volume(n : Number) : void {						if ( !soundTrans ) return;			soundTrans.volume = n;			soundChannel.soundTransform = soundTrans;			dispatchEvent(new Mp3PlayerEvent(Mp3PlayerEvent.VOLUME_CHANGE))					}		/**		 * @method pan		 * @tooltip pan the sound		 * @param Number		 * @return Number		 */		public function get pan() : Number {						if (!soundTrans) return 0;			return soundTrans.pan;					}		public function set pan(n : Number) : void {						if ( !soundTrans ) return;			soundTrans.pan = n;			soundChannel.soundTransform = soundTrans;			dispatchEvent(new Mp3PlayerEvent(Mp3PlayerEvent.PAN_CHANGE))					}		/**		 * @method length		 * @tooltip get length of sound		 * @return Number in Milliseconds		 */		public function get length() : Number {						if ( sound == null ) {								return 0;							} else {								// TRICKY - There is a bug in the sound object length where it does not return the				// correct length when the sound is loading - This equation factors the				// error ratio of sound.length when loading				return ( sound.bytesTotal / (sound.bytesLoaded / sound.length ) );							}					}		/**		 * @method time		 * @tooltip play time 		 * @return Number		 */		public function get time() : Number {						if ( soundChannel == null ) {								return 0;							} else { return soundChannel.position; }					}		/**		 * @method timePercent		 * @tooltip get the percentage of audio played		 */		public function get timePercent() : Number {						if ( !sound.length ) return 0;			return soundChannel.position / sound.length;					}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method onId3Info		 * @tooltip id3 info event		 */		private function onId3Info(e : Event) : void {						try {								var id3Event : Mp3PlayerEvent 	= new Mp3PlayerEvent(Mp3PlayerEvent.ID3)					id3Event.id3 				= sound.id3				dispatchEvent(id3Event);							} catch ( err : Error ) {}					}		/**		 * @method onSongLoaded		 * @tooltip audio has been completly loaded		 */		private function onSongLoaded(e : Event) : void {						var loadEvent : LoadEvent = new LoadEvent(LoadEvent.COMPLETE);			dispatchEvent(loadEvent);					}		/**		 * @method updateProgress		 * @tooltip audio load progress		 */		private function updateProgress(e : TimerEvent = null) : void {						var playProgress : Mp3PlayerEvent = new Mp3PlayerEvent(Mp3PlayerEvent.TIME_CHANGE);				playProgress.playPercent = timePercent;					// TRICKY - There is a bug in the sound object length where it does not return the				// correct length when the sound is loading - This equation factors the				// error ratio of sound.length when loading					playProgress.totalTime = ( sound.bytesTotal / (sound.bytesLoaded / sound.length) );				playProgress.currentTime = soundChannel.position;			dispatchEvent(playProgress);					}		/**		 * @method onSongEnd		 * @tooltip song complete		 */		private function onSongEnd(e : Event) : void {			// ------------------------------------------------------------------------------------			// TRICKY - Every time we pause resume the stream flash returns a new sound channel			// so we need to re-add the COMPLETE event listener;			var completeEvent : Mp3PlayerEvent = new Mp3PlayerEvent(Mp3PlayerEvent.COMPLETE)			if ( playlist != null ) {								if ( playlist.length > 0 ) {										completeEvent.songID 		= playlistIndex;					completeEvent.totalSongs 	= playlist.length - 1;									}			}			dispatchEvent( completeEvent );			progressTimer.stop();					}		/**		 * @method onLoadProgress		 * @tooltip load progress		 */		private function onLoadProgress(e : ProgressEvent) : void {						var lEvent : LoadEvent 	= new LoadEvent(LoadEvent.PROGRESS)							lEvent.bytesLoaded 	= e.bytesLoaded;				lEvent.bytesTotal 	= e.bytesTotal;							dispatchEvent( lEvent );		}	}}