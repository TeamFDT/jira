/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.Form * Version 	  	:  * Description 	:  *  ******************************************************************************************************************************************************************************** *  * Author 		:  * Date 			:  *  ******************************************************************************************************************************************************************************** *  * METHODS *  * * PROPERTIES *  * * EVENTS *  *  ******************************************************************************************************************************************************************************** **********************************************************************************************************************************************************************************/package com.kurst.controls {	import com.greensock.TweenLite;	import flash.display.MovieClip	// import fl.core.UIComponent;	// import caurina.transitions.Tweener;	import com.kurst.events.FormEvent;	public class FormBasic extends MovieClip {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _useAnimation : Boolean = true		private var _isVisible : Boolean		private var _fadeTime : Number = .5		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				public function FormBasic() {			super();			visible = false;			initForm();			// DelayCall.addCall('initForm', this)		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method show()		 * @tooltip show the form		 */		public function show(delayTime : Number = 0) : Boolean {			// ------------------------			// 26/11/09			if ( visible && alpha == 1 ) return false;			// ------------------------			_isVisible = true ;			if ( _useAnimation ) {				// Tweener.removeTweens( this, alpha )				visible = true;				alpha = 0;				var tweenProps : Object = new Object();				tweenProps.alpha = 1;				tweenProps.onComplete = _show;				tweenProps.delay = delayTime;				TweenLite.to(this, fadeTime, tweenProps);				/*				Tweener.addTween( this, { 	transition:"easeinoutexpo", 				alpha:1,				time:fadeTime,				onComplete:_show } );				 */				return true;			} else {				dispatchEvent(new FormEvent(FormEvent.VISIBLE))				visible = true;				return true;			}			return false;		}		private function _show() : void {			_isVisible = true ;			dispatchEvent(new FormEvent(FormEvent.VISIBLE))		}		public function showComplete() : void {			_show();		}		/**		 * @method hide()		 * @tooltip hide the form		 */		public function hide() : Boolean {			_isVisible = false;			if ( visible == false ) return false			if ( _useAnimation ) {				var tweenProps : Object = new Object();				tweenProps.alpha = 0;				tweenProps.onComplete = _hide				TweenLite.to(this, fadeTime, tweenProps);				/*				Tweener.addTween( this, { 	transition:"easeinoutexpo", 				alpha:0,				time:fadeTime,				onComplete:_hide } );																 */			} else {				visible = false;				dispatchEvent(new FormEvent(FormEvent.HIDDEN))				return true			}			return true;		}		private function _hide() : void {			dispatchEvent(new FormEvent(FormEvent.HIDDEN))			visible = false;			_isVisible = false;		}		public function hideComplete() : void {			_hide();		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				private function initForm() : void {			visible = isVisible;		}		/**		 * @method setModal()		 * @tooltip makes the form modal ( needs a movieclip called _modal_mc to be set )		 */		private function setModal() : void {						/*			// TO IMPLEMENT			// AS2: 						var mmc:MovieClip 	= this[_modal_mc];						if ( _isModal ) {							mmc.onRelease = function (){};			mmc.onMouseDown = function (){};			mmc.useHandCursor 	= false;							}else{				delete( mmc.onRelease );			delete( mmc.onMouseDown );							}						 *			 */			 			 			// stage.addChildAt( mouseCursor , stage.numChildren );		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method useAnimation		 * @tooltip		 * @param		 * @return		 */		[Inspectable(defaultValue=true )]		public function get useAnimation() : Boolean {			return _useAnimation;		}		public function set useAnimation(val : Boolean) : void {			_useAnimation = val;		}		/**		 * @method fadeTime		 * @tooltip time for the form to fade if the animation is enables		 * @param		 * @return		 */		[Inspectable(defaultValue=.5)]		public function get fadeTime() : Number {			return _fadeTime;		}		public function set fadeTime(val : Number) : void {			_fadeTime = val;		}		/**		 * @method isModal		 * @tooltip set the modal property of the form		 * @param Boolean		 * @return Boolean		 */		/*		[Inspectable(defaultValue=false)]		public function get isModal():Boolean{ return _isModal; }		public function set isModal( val:Boolean) { _isModal = val; setModal();}		 */		/**		 * @method modal_mc		 * @tooltip name of modal movieclip - must be in the same movieclip as the component		 * @param String - name of modal movieclip - must be in the same movieclip as the component		 * @return String - name of modal movieclip 		 */		/*		[Inspectable(defaultValue='')]		public function get modal_mc():String{ return _modal_mc; }		public function set modal_mc( val:String) { _modal_mc = val; 		}		 */		[Inspectable( )]		public function get isVisible() : Boolean {			return _isVisible;		}		public function set isVisible(iV : Boolean) : void {			_isVisible = iV;		}	}}