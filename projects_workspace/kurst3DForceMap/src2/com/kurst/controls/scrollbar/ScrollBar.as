/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.scrollbar.ScrollBar * Version 	  	: 1 * Description 	: Scroll Bar - Works with TextField - ScrollPane and ListBox *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 01/02/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *	setScrollTarget ( anObject:* ) : void *	draw( ) *	drawScrollProps ( ) *	setSkin( ) * * PROPERTIES *  *	autoHide *	scrollSpeed *	scrollIncrement *  *  ******************************************************************************************************************************************************************************** **********************************************************************************************************************************************************************************/package com.kurst.controls.scrollbar {	import com.kurst.controls.core.KurstUIComponentBase;	import com.kurst.events.ScrollPaneEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.utils.Timer;	import flash.utils.describeType;	/**	 * @author karimbeyrouti	 */	public class ScrollBar extends KurstUIComponentBase {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private static var LARGEINCREMENT : Number = 6;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public var DeadPreview : MovieClip;		private var _scrollSpeedMultiplier : Number = 1;		private var _scrollIncrement : Number = 1;		private var isHorisontal : Boolean;		private var _autoHide : Boolean = false;		private var contentTarget : *;		private var scrollType : String;		private var bodyScrubFlag : Boolean = false;		private var ScrollTop_mc : *;		private var ScrollBarDragger_mc : *;		private var ScrollBottom_mc : *;		private var ScrollBody_mc : *;		private var scrollTop : Number ;		private var scrollRange : Number  ;		private var MARGIN : Number = 1;		private var MoveIncrement : Number = 0;		private var FrameTimer : Timer;		private var FrameTimerDelay : Number = 100;		private var ScrollTimer : Timer;		private var ScrollTimerDelay : Number = 50;		private var _addedToStageFlag : Boolean = false;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				public function ScrollBar() {			super();			addEventListener(Event.ADDED_TO_STAGE, AddedToStage, false, 0, true);		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function destroy() : void {			// Screen for scrollable objects - so far this works with the			// Scroll Pane , and the list box			if ( contentTarget != null ) {				var objName : String = describeType(contentTarget).@name;				if ( objName.split('::')[1] == "ScrollPane" || objName.split('::')[1] == "ListBox") {					contentTarget.removeEventListener(ScrollPaneEvent.CHANGE, ScrollPaneChange);					scrollType = 'pane';				}			}			removeEventListener(MouseEvent.MOUSE_DOWN, MousePressHanlder);			if ( stage != null ) {				stage.removeEventListener(MouseEvent.MOUSE_UP, MouseReleaseHandler);				stage.removeEventListener(MouseEvent.MOUSE_MOVE, DragHandler);			}			if ( FrameTimer != null ) {				FrameTimer.stop();				FrameTimer.removeEventListener(TimerEvent.TIMER, scrollScrub);			}			if ( ScrollTimer != null ) {				ScrollTimer.stop();				ScrollTimer.removeEventListener(TimerEvent.TIMER, scroll);			}			contentTarget = null;		}		/**		 * @method setScrollTarget ( anObject:Object )		 * @tooltip set the scrollbar target		 * @param MovieClip - ListArea - ScrollArea		 */		public function setScrollTarget(anObject : *) : void {			// setthe scroll target			contentTarget = anObject;			// update the scroll bar properties			drawScrollProps();			// Synchronize the scroll bar to it's target - to make sure the scroll bar is updated when			// the target changes			FrameTimer = new Timer(FrameTimerDelay);			FrameTimer.addEventListener(TimerEvent.TIMER, scrollScrub, false, 0, true);			FrameTimer.start();			// Scroll Timer			ScrollTimer = new Timer(ScrollTimerDelay);			ScrollTimer.addEventListener(TimerEvent.TIMER, scroll, false, 0, true);			// Screen for scrollable objects - so far this works with the			// Scroll Pane , and the list box			var objName : String = describeType(anObject).@name;			// trace( objName.split('::')[1] )			if ( objName.split('::')[1] == "ScrollPane" || objName.split('::')[1] == "List") {				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------				anObject.addEventListener(ScrollPaneEvent.CHANGE, ScrollPaneChange, false, 0, true);				scrollType = 'pane';			} else if ( objName.split('::')[1] == "TextField") {				// -----------------------------------------------------------------				// TEXTFIELD				// -----------------------------------------------------------------				scrollType = 'field';			}		}		/**		 * @method draw( )		 * @tooltip draw the scroll bar		 */		override protected function draw() : void {			// Only update when the scroll bar has been added to the stage			if ( _addedToStageFlag == false ) return;			if ( !( ScrollBarDragger_mc && ScrollTop_mc && ScrollBody_mc && ScrollBottom_mc ) ) return ;			// Scroll bar orientation			if ( isHorisontal ) {				// position the visual object of the scroll bar				ScrollTop_mc.y = 0;				ScrollBody_mc.y = ScrollTop_mc.y + ScrollTop_mc.width;				scrollTop = ScrollBarDragger_mc.y = ScrollTop_mc.y + ScrollTop_mc.width + MARGIN;				ScrollBody_mc.height = width - ScrollBottom_mc.height - ScrollTop_mc.height;				ScrollBottom_mc.y = width - ScrollBottom_mc.height;				scrollRange = width - ScrollTop_mc.height - ScrollBottom_mc.height - ScrollBarDragger_mc.height - (MARGIN * 2);			} else {				// Vertical scroll bar				// position the visual object of the scroll bar				if ( ScrollBarDragger_mc.width > ScrollBody_mc.width ) {					ScrollBarDragger_mc.x = Math.round((ScrollBody_mc.width - ScrollBarDragger_mc.width) / 2);				}				ScrollTop_mc.y = 0;				ScrollBody_mc.y = ScrollTop_mc.y + ScrollTop_mc.height;				scrollTop = ScrollBarDragger_mc.y = ScrollTop_mc.y + ScrollTop_mc.height + MARGIN;				ScrollBody_mc.height = height - ScrollBottom_mc.height - ScrollTop_mc.height;				ScrollBottom_mc.y = height - ScrollBottom_mc.height;				scrollRange = height - ScrollTop_mc.height - ScrollBottom_mc.height - ScrollBarDragger_mc.height;				// - (MARGIN * 2);			}			drawScrollProps();			super.draw();		}		/**		 * @method drawScrollProps		 * @tooltip  update the scroll bar - auto hide if content has changed... 		 */		public function drawScrollProps() : void {			if ( _addedToStageFlag == false ) return;			if ( contentTarget == null ) return;			switch ( scrollType ) {				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------					case 'pane' :					if (_autoHide) {						if ( isHorisontal ) {							if (contentTarget.maxhscroll <= 1) {								visible = false;							} else {								visible = true;							}						} else {							if (contentTarget.maxscroll <= 1) {								visible = false;							} else {								visible = true;							}						}					}					break;				case 'field' :					// -----------------------------------------------------------------					// TEXTFIELD					// -----------------------------------------------------------------					if (_autoHide) {						var txt : TextField = contentTarget as TextField;						if ( isHorisontal ) {							if ( txt.scrollH <= 1) {								visible = false;							} else {								visible = true;							}						} else {							if ( txt.scrollV <= 1) {								visible = false;							} else {								visible = true;							}						}					}					break;			}		};		/**		 * @method setSkin ( top:String, bottom:String, body:String, dragger:String )		 * @tooltip set the skin of the scroll bar		 * @param top:String,		 * @param bottom:String, 		 * @param body:String, 		 * @param dragger:String		 */		public function setSkin(scrollTop : Class = null, scrollBarDragger : Class = null, scrollBottom : Class = null, scrollBody : Class = null) : void {			if ( scrollTop )				ScrollTop_mc = new scrollTop();			if ( scrollBarDragger )				ScrollBarDragger_mc = new scrollBarDragger();			if ( scrollBottom )				ScrollBottom_mc = new scrollBottom();			if ( scrollBody )				ScrollBody_mc = new scrollBody();			if ( ScrollBody_mc )				addChild(ScrollBody_mc);			if ( ScrollTop_mc )				addChild(ScrollTop_mc);			if ( ScrollBottom_mc )				addChild(ScrollBottom_mc);			if ( ScrollBarDragger_mc )				addChild(ScrollBarDragger_mc);			draw();		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method scrollScrub		 * @tooltip moves the scrubber according to position of text		 */		private function scrollScrub(e : TimerEvent = null) : void {			var adj : Number			if ( scrollType == "field" ) {				// -----------------------------------------------------------------				// TEXTFIELD				// -----------------------------------------------------------------				var txt : TextField = contentTarget as TextField;				if ( isHorisontal ) {					if (  txt.scrollH == 1 ) {						adj = scrollTop;					} else {						adj = scrollTop + ( scrollRange * ( txt.scrollH / txt.maxScrollH ) );					}				} else {					if ( txt.scrollV == 1 ) {						adj = scrollTop;					} else {						adj = scrollTop + ( scrollRange * ( txt.scrollV / txt.maxScrollV ) );					}				}				ScrollBarDragger_mc.y = adj;			} else {				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------				if ( isHorisontal ) {					ScrollBarDragger_mc.y = scrollTop + ( (scrollRange ) / Math.round(contentTarget.maxhscroll - 1) ) * Math.round(contentTarget.hscroll);				} else {					ScrollBarDragger_mc.y = scrollTop + ( (scrollRange ) / Math.round(contentTarget.maxscroll - 1) ) * Math.round(contentTarget.scroll);					if ( ScrollBarDragger_mc.y > ( scrollTop + scrollRange ) ) {						ScrollBarDragger_mc.y = scrollTop + scrollRange;					}				}			}		};		/**		 * @method  DragHandler ( e:MouseEvent = null ) : void		 * @tooltip update content / scrollbar when a drag action is in progress		 */		private function DragHandler(e : MouseEvent = null) : void {			var pScroll : Number;			if ( scrollType == "field" ) {				// -----------------------------------------------------------------				// TEXTFIELD				// -----------------------------------------------------------------				var txt : TextField = contentTarget as TextField;				if ( isHorisontal ) {					pScroll = Math.round(txt.maxScrollH * ( ( ScrollBarDragger_mc.y - ( scrollTop  ) ) / scrollRange ));				} else {					pScroll = Math.round(txt.maxScrollV * ( ( ScrollBarDragger_mc.y - ( scrollTop  ) ) / scrollRange ));				}				if ( isHorisontal ) {					txt.scrollH = pScroll;				} else {					txt.scrollV = pScroll ;				}			} else {				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------				if ( isHorisontal ) {					pScroll = Math.round((contentTarget.maxhscroll ) * ( ScrollBarDragger_mc.y - scrollTop ) / scrollRange);				} else {					pScroll = Math.round((contentTarget.maxscroll ) * ( ScrollBarDragger_mc.y - scrollTop ) / scrollRange);				}				if ( isHorisontal ) {					contentTarget.hscroll = pScroll;				} else {					contentTarget.scroll = pScroll ;				}			}		};		/**		 * @method init()		 * @tooltip initlialize the scroll bar 		 */		private function init() : void {			_scrollIncrement = ScrollBar.LARGEINCREMENT;			addEventListener(MouseEvent.MOUSE_DOWN, MousePressHanlder, false, 0, true);			stage.addEventListener(MouseEvent.MOUSE_UP, MouseReleaseHandler, false, 0, true);			setSkin();		}		/**		 * @method onPressBody		 * @tooltip event - called when the body of the scroll bar is pressed		 */		private function PressBody() : void {			bodyScrubFlag = true;			if ( isHorisontal ) {				if ( mouseY < ScrollBarDragger_mc.y ) {					moveUp(_scrollIncrement);				} else {					moveDown(_scrollIncrement);				}			} else {				if ( mouseY < ScrollBarDragger_mc.y ) {					moveUp(_scrollIncrement);				} else {					moveDown(_scrollIncrement);				}			}		}		/**		 * @method moveUp		 * @tooltip initiale a Scroll up operation		 * @param		 */		private function moveUp(increment : Number = -1) : void {			FrameTimer.stop();			// var increment : Number  = ( increment == undefined ) ? SMALLINCREMENT : increment;			var inc : Number;			if ( scrollType == "field" ) {				inc = - 1				// * increment;			} else {				if ( isHorisontal ) {					inc = -1;					// - contentTarget.scrollWidth//*  ( contentTarget.maxhscroll / ( scrollRange / ( 1 * increment ) ) );				} else {					inc = -1 - contentTarget.scrollHeight;					// *  ( contentTarget.maxscroll / ( scrollRange / ( 1 * increment ) ) );				}			}			MoveIncrement = inc;			scroll();			ScrollTimer.start();		};		/**		 * @method moveDown		 * @tooltip initiale a Scroll down operation		 * @param		 */		private function moveDown(increment : Number = 1) : void {			FrameTimer.stop();			// var increment : Number  = ( increment == undefined ) ? SMALLINCREMENT : increment;			var inc : Number ;			if ( scrollType == "field" ) {				// trace('TEXTFIELD');				// -----------------------------------------------------------------				// TEXTFIELD				// -----------------------------------------------------------------				inc = 1 ;				// * increment;			} else {				// trace('SCROLL PANE');				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------				if ( isHorisontal ) {					inc = 1 ;					// + contentTarget.scrollWidth//contentTarget.maxhscroll / ( scrollRange / (  1 * increment ) ) ;				} else {					inc = 1 + contentTarget.scrollHeight ;					// contentTarget.maxscroll / ( scrollRange / (  1 * increment ) ) ;				}			}			MoveIncrement = inc;			scroll();			ScrollTimer.start();		};		/**		 * @method scroll		 * @tooltip scroll the text and update the scrub bar		 */		private function scroll(e : TimerEvent = null) : Boolean {			// Sroll increment			var increment : Number = MoveIncrement * _scrollSpeedMultiplier;			if ( bodyScrubFlag ) {				if ( ( increment < 0 ) && !( mouseY < ScrollBarDragger_mc.y ) ) {					return false;				}				if ( ( increment > 0 ) && !( mouseY > ScrollBarDragger_mc.y ) ) {					return false;				}			}			var newScrollPos : Number;			switch ( scrollType ) {				// -----------------------------------------------------------------				// SCROLL PANE				// -----------------------------------------------------------------								case 'pane':					if ( isHorisontal ) {						if ( contentTarget.maxhscroll != 0 ) {							newScrollPos = ( contentTarget.hscroll + increment );							// if we are in scroll range							if ( newScrollPos <= contentTarget.maxhscroll && newScrollPos >= 0 ) {								contentTarget.hscroll = newScrollPos;								// if we are below - set to 0							} else if ( newScrollPos < 0 ) {								contentTarget.hscroll = 0;								// if we are abive - set to max							} else {								contentTarget.hscroll = contentTarget.maxhscroll;							}						}					} else {						if ( contentTarget.maxscroll != 0 ) {							newScrollPos = ( contentTarget.scroll + increment );							// if we are in scroll range							if ( newScrollPos <= contentTarget.maxscroll && newScrollPos >= 0 ) {								contentTarget.scroll = newScrollPos	;								// if we are below - set to 0							} else if ( newScrollPos < 0 ) {								contentTarget.scroll = 0;								// if we are abive - set to max							} else {								contentTarget.scroll = contentTarget.maxscroll;							}						}					}					break;				// -----------------------------------------------------------------				// TEXTFIELD				// -----------------------------------------------------------------								case 'field':					var txt : TextField = contentTarget as TextField;					if ( isHorisontal ) {						if ( txt.maxScrollH != 0 ) {							newScrollPos = ( txt.scrollH + increment );							// if we are in scroll range							if ( newScrollPos <= txt.maxScrollH && newScrollPos >= 0 ) {								contentTarget.hscroll = newScrollPos;								// if we are below - set to 0							} else if ( newScrollPos < 0 ) {								txt.scrollH = 0;								// if we are abive - set to max							} else {								txt.scrollH = txt.maxScrollH;							}						}					} else {						if ( txt.maxScrollV != 0 ) {							newScrollPos = ( txt.scrollV + increment );							// if we are in scroll range							if ( newScrollPos <= txt.maxScrollV && newScrollPos >= 0 ) {								txt.scrollV = newScrollPos	;								// if we are below - set to 0							} else if ( newScrollPos < 0 ) {								txt.scrollV = 0;								// if we are abive - set to max							} else {								txt.scrollV = txt.maxScrollV;							}						}					}					break;			}			scrollScrub();			return true;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method autoHide		 * @tooltip auto hide the scrollbar when its not needed		 */		public function get autoHide() : Boolean {			return _autoHide;		}		public function set autoHide(autoHide : Boolean) : void {			_autoHide = autoHide;			drawScrollProps();		}		/**		 * @method scrollSpeed		 * @tooltip scroll speed - 		 */		public function get scrollSpeed() : Number {			return _scrollSpeedMultiplier;		}		public function set scrollSpeed(scrollSpeed : Number) : void {			_scrollSpeedMultiplier = scrollSpeed;		}		/**		 * @method scrollIncrement		 * @tooltip scroll increment - 		 */		public function get scrollIncrement() : Number {			return _scrollIncrement;		}		public function set scrollIncrement(scrollIncrement : Number) : void {			_scrollIncrement = scrollIncrement;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method AddedToStage		 * @tooltip added to stage event handler		 */		private function AddedToStage(e : Event) : void {			_addedToStageFlag = true;			removeEventListener(Event.ADDED_TO_STAGE, AddedToStage);			init();		}		/**		 * @method OnStartDrag		 * @tooltip start drag event handler		 */		private function OnStartDrag() : void {			var bounds : Rectangle = new Rectangle(ScrollBarDragger_mc.x, scrollTop, ScrollBarDragger_mc.x, scrollRange);			ScrollBarDragger_mc.startDrag(false, bounds);			FrameTimer.stop();			stage.addEventListener(MouseEvent.MOUSE_MOVE, DragHandler, false, 0, true);		}		/**		 * @method OnStopDrag		 * @tooltip end drag event handler		 */		private function OnStopDrag() : void {			ScrollBarDragger_mc.stopDrag();		}		/**		 * @method MouseReleaseHandler (e : MouseEvent = null ) : void		 * @tooltip mouse up event handler		 */		private function MouseReleaseHandler(e : MouseEvent = null) : void {			if ( contentTarget == null ) return ;			stage.removeEventListener(MouseEvent.MOUSE_MOVE, DragHandler);			if ( contentTarget != null ) {				ScrollBarDragger_mc.gotoAndStop(1);				ScrollTop_mc.gotoAndStop(1);				ScrollBottom_mc.gotoAndStop(1);				OnStopDrag();				ScrollTimer.stop();				FrameTimer.start();			}		}		/**		 * @method MousePressHanlder (e : MouseEvent = null ):void		 * @tooltip Mouse down event handler		 */		private function MousePressHanlder(e : MouseEvent = null) : void {			if ( contentTarget == null ) return ;			// trace('MousePressHanlder');			if ( ScrollBarDragger_mc.hitTestPoint(stage.mouseX, stage.mouseY) ) {				ScrollBarDragger_mc.gotoAndStop(2);				OnStartDrag();			} else if ( ScrollBody_mc.hitTestPoint(stage.mouseX, stage.mouseY) ) {				PressBody();			} else if ( ScrollTop_mc.hitTestPoint(stage.mouseX, stage.mouseY) ) {				ScrollTop_mc.gotoAndStop(2);				moveUp();			} else if ( ScrollBottom_mc.hitTestPoint(stage.mouseX, stage.mouseY) ) {				ScrollBottom_mc.gotoAndStop(2);				moveDown();			}		}		/**		 * @method ScrollPaneChange( e:ScrollPaneEvent):void		 * @tooltip Called when the scroll pane has changed		 */		private function ScrollPaneChange(e : ScrollPaneEvent) : void {			draw();		}	}}