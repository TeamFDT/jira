/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.listbox.ListItem * Version 	  	: 1 * Description 	: List item base class functionality  * 					this needs to be extended to draw / display anything -  *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 08/02/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *		destroy():void *		function draw():void *		setData( obj : Object ) : void *		setSelected( flag : Boolean ):void *		setSelectable( flag : Boolean ):void *		setText ( t : String ) : void  *		getText ():String * * PROPERTIES *  *		id ():Number *		data ():Object *		selected () : Boolean *		selectable ():Boolean  *		text ():String * * EVENTS *  * 		ListBoxEvent.SELECT_ITEM *  **********************************************************************************************************************************************************************************/package com.kurst.controls.listbox.core {	import com.kurst.controls.core.KurstUIComponentBase;	import com.kurst.events.ListBoxEvent;	import flash.events.MouseEvent;	public class ListItem extends KurstUIComponentBase {		private var _isSelected : Boolean = false;		private var _isSelectable : Boolean = true;		private var _data : Object;		private var _id : Number;		private var _label : String;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function ListItem() {			cacheAsBitmap = true;		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method destroy() : void		 * @tooltip destroy the list item		 */		public function destroy() : void {		}		/**		 * @method draw() : void 		 * @tooltip draw the list item		 */		override protected function draw() : void {		}		/**		 * @method setData( obj : Object ) : void		 * @tooltip assign a Object as Data to the list item		 * @param Object - 		 */		protected function setData(obj : Object) : void {			_data = obj;		}		/**		 * @method setSelected( flag : Boolean ):void		 * @tooltip select / de-select the list item		 * @param Flag		 */		protected function setSelected(flag : Boolean) : void {		}		/**		 * @method setSelectable( flag : Boolean ):void		 * @tooltip set whether the list item is selectable		 * @param flag - boolean		 */		protected function setSelectable(flag : Boolean) : void {		}		/**		 * @method setText ( t:String):Void		 * @tooltip set the text		 * @param string - text to apply to label		 */		public function setText(t : String) : void {			_label = t;		}		/**		 * @method getText ():String		 * @tooltip return the label text		 * @return string		 */		public function getText() : String {			return _label;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method get/set id		 * @tooltip get or set the listItem ID		 * @param object		 * @return object		 */		public function get id() : Number {			return _id ;		}		public function set id(value : Number) : void {			_id = value ;		}		/**		 * @method data		 * @tooltip set the data object associated with the listItem		 * @param Object		 * @return Object		 */		public function get data() : Object {			return _data ;		}		public function set data(value : Object) : void {			_data = value ;			setData(value);		}		/**		 * @method get/set selected		 * @tooltip select or unselect the listItem		 * @param boolean 		 * @return boolean		 */		public function get selected() : Boolean {			return _isSelected;		}		public function set selected(value : Boolean) : void {			_isSelected = value;			setSelected(value);		}		/**		 * @method selectable		 * @tooltip get/set the menu listItem to be selectable or not		 * @param boolean		 * @return boolean		 */		public function set selectable(value : Boolean) : void {			_isSelectable = value;			setSelectable(value);		}		public function get selectable() : Boolean {			return _isSelectable;		}		/**		 * @method get/set text		 * @tooltip set the label		 * @param string		 * @return string		 */		public function get text() : String {			return getText();		}		public function set text(t : String) : void {			setText(t);		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method Click( e : MouseEvent = null ) : void		 * @tooltip click event handler		 * @param e : MouseEvent		 */		public function Click(e : MouseEvent = null) : void {			var sItem : ListBoxEvent = new ListBoxEvent(ListBoxEvent.SELECT_ITEM, true);			sItem.data = data;			dispatchEvent(sItem);		}		/**		 * @method RollOut( e : MouseEvent )		 * @tooltip roll out event handler		 * @param e : MouseEvent		 */		protected function RollOut(e : MouseEvent) : void {		}		/**		 * @method RollOver( e : MouseEvent ) : void		 * @tooltip roll over event handler		 * @param e : MouseEvent		 */		protected function RollOver(e : MouseEvent) : void {		}	}}