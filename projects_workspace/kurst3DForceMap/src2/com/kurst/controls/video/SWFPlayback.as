/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.video.SWFPlayback * Version 	  	:  * Description 	:  *  ******************************************************************************************************************************************************************************** *  * Author 		:  * Date 			:  *  ******************************************************************************************************************************************************************************** *  * METHODS *  * * PROPERTIES *  * * EVENTS *  *  ******************************************************************************************************************************************************************************** * 				: * * ********************************************************************************************************************************************************************************* * NOTES			: -default-background-color #000000 **********************************************************************************************************************************************************************************/package com.kurst.controls.video {	import flash.media.SoundMixer;	import flash.media.SoundTransform;	import flash.display.Sprite;	import com.kurst.controls.core.KurstUIComponentBase;	import fl.video.VideoEvent;	import fl.video.VideoProgressEvent;	import fl.video.VideoState;	import com.kurst.controls.video.events.VideoBufferEvent;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.geom.Rectangle;	import flash.net.URLRequest;	public class SWFPlayback extends KurstUIComponentBase {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// On Stage		public var deadPreview : MovieClip;		private var background : Sprite;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// GET / SET		private var _backgroundColour : uint = 0xFFFFFF;		private var _backgroundAlpha : Number = 1;		private var _playheadTime : Number;		private var _totalTime : Number;		private var _autoPlay : Boolean = false;		private var _loop : Boolean = false;		private var _rewindOnComplete : Boolean = false;		private var _isPlaying : Boolean = false;		private var _useBuffer : Boolean = true;		private var _stopped : Boolean = true;		private var _volume : Number = 1;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// Internal		private var swfBuffer : VideoPlaybackBuffer;		private var loader : Loader ;		private var bounds : Rectangle;		private var _video : MovieClip;		private var _loopFrame : Number = 2;		private var _defaultWidth : Number = 320;		private var _defaultHeight : Number = 240;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function SWFPlayback() {			addChild(background = new Sprite()) ;			_width = _defaultWidth;			_height = _defaultHeight;			scaleX = scaleY = 1;			swfBuffer = new VideoPlaybackBuffer();			if ( deadPreview )				if ( contains(deadPreview))					removeChild(deadPreview);			draw();		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function loadMovie(uri : String) : void {			if ( autoPlay )				_isPlaying = true;			if ( _useBuffer ) {				_autoPlay = false;				swfBuffer.addEventListener(VideoBufferEvent.BUFFER_LOADED, onBufferLoaded, false, 0, true);				swfBuffer.addEventListener(VideoBufferEvent.BUFFER_PROGRESS, onBufferProgress, false, 0, true);			}			loader = new Loader();			loader.load(new URLRequest(uri));			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete, false, 0, true);			loader.contentLoaderInfo.addEventListener(Event.INIT, onLoadInit, false, 0, true);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onLoadProgress, false, 0, true);			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.LOADING;			dispatchEvent(e);			swfBuffer.startLoad(stage.frameRate);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override protected function draw() : void {			bounds = new Rectangle(0, 0, width, height);			scrollRect = bounds;			if ( background ) {				background.graphics.clear();				background.graphics.beginFill(_backgroundColour, _backgroundAlpha);				background.graphics.drawRect(0, 0, _width, _height);				background.graphics.endFill();			}			if ( deadPreview ) {				deadPreview.width = _width;				deadPreview.height = _height;			}		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function play() : void {			stopped = false;			_isPlaying = true;			if ( _video )				_video.play();			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.PLAYING;			dispatchEvent(e);			addEventListener(Event.ENTER_FRAME, onVideoProgress, false, 0, true);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function pause() : void {			_isPlaying = false;			if ( _video )				_video.stop();			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.PAUSED;			dispatchEvent(e);			removeEventListener(Event.ENTER_FRAME, onVideoProgress);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function stop() : void {			stopped = true;			_isPlaying = false;			if ( _video )				_video.stop();			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.STOPPED;			dispatchEvent(e);			removeEventListener(Event.ENTER_FRAME, onVideoProgress);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function rewind(frame : int = 1, pauseFrame : Boolean = false) : void {			if ( pauseFrame ) {				if ( _video )					_video.gotoAndStop(frame);				pause();			} else {				if ( _video )					_video.gotoAndPlay(frame);				play();			}		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function seekPercent(p : Number/* 1 - 100 */) : void {			var frame : int = _video.totalFrames * ( p / 100 );			if ( _isPlaying ) {				if ( _video )					_video.gotoAndPlay(frame);			} else {				if ( _video )					_video.gotoAndStop(frame);			}			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.SEEKING;			dispatchEvent(e);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function seek(time : Number/* time in seconds */) : void {			var frame : int = ( time / totalTime ) * _video.totalFrames;			if ( _isPlaying ) {				if ( _video )					_video.gotoAndPlay(frame);			} else {				if ( _video )					_video.gotoAndStop(frame);			}			var e : VideoEvent = new VideoEvent(VideoEvent.STATE_CHANGE);			e.state = VideoState.SEEKING;			dispatchEvent(e);		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function initVideo() : void {			if ( _video ) {				_video.width = _width;				_video.height = _height;			}			if ( autoPlay )				play();			else				stop();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onVideoProgress(e : Event = null) : void {			if ( !_video ) return ;			var c : int = _video.currentFrame;			var t : int = _video.totalFrames;			if ( c == t ) {				if ( loop ) {					_video.gotoAndPlay(_loopFrame);				} else if ( rewindOnComplete ) {					pause();					_video.gotoAndStop(1);				} else {					pause();				}				dispatchEvent(new Event(Event.COMPLETE));			}			_totalTime = _video.totalFrames / stage.frameRate;			_playheadTime = _video.currentFrame / stage.frameRate;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get paused() : Boolean {			return !isPlaying;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get autoPlay() : Boolean {			return _autoPlay;		}		public function set autoPlay(autoPlay : Boolean) : void {			_autoPlay = autoPlay;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get loop() : Boolean {			return _loop;		}		public function set loop(loop : Boolean) : void {			_loop = loop;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get rewindOnComplete() : Boolean {			return _rewindOnComplete;		}		public function set rewindOnComplete(rewindOnComplete : Boolean) : void {			_rewindOnComplete = rewindOnComplete;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get playheadTime() : Number {			return _playheadTime;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get totalTime() : Number {			return _totalTime;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get isPlaying() : Boolean {			return _isPlaying;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		public function get video() : MovieClip{		return loader.content as MovieClip;		}		 */		public function get video() : MovieClip {			return _video;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get useBuffer() : Boolean {			return _useBuffer;		}		public function set useBuffer(useBuffer : Boolean) : void {			_useBuffer = useBuffer;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get bufferPercentage() : Number {			return swfBuffer.percentageToLoadUntilStream;		}		public function set bufferPercentage(bufferPercentage : Number) : void {			swfBuffer.percentageToLoadUntilStream = bufferPercentage;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get stopped() : Boolean {			return _stopped;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function set stopped(stopped : Boolean) : void {			_stopped = stopped;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get loopFrame() : Number {			return _loopFrame;		}		public function set loopFrame(loopFrame : Number) : void {			_loopFrame = loopFrame;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get backgroundColour() : uint {			return _backgroundColour;		}		public function set backgroundColour(v : uint) : void {			_backgroundColour = v;			draw();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get volume() : Number {			return _volume;		}		public function set volume(volume : Number) : void {			_volume = volume;			var myTransform : SoundTransform = SoundMixer.soundTransform;			myTransform.volume = _volume;			// mutes sound			SoundMixer.soundTransform = myTransform;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get backgroundAlpha() : Number {			return _backgroundAlpha;		}		public function set backgroundAlpha(backgroundAlpha : Number) : void {			_backgroundAlpha = backgroundAlpha;			draw();		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -EVENT HANDLERS---------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onBufferLoaded(event : VideoBufferEvent) : void {			dispatchEvent(event.clone());			play();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onBufferProgress(event : VideoBufferEvent) : void {			dispatchEvent(event.clone());		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onLoadInit(event : Event) : void {			// event.target.content as MovieClip;			_video = loader.content as MovieClip;			addChild(_video);			initVideo();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onLoadComplete(event : Event) : void {			swfBuffer.onUpdate(loader);			if ( _useBuffer && !swfBuffer.bufferLoaded ) {				play();				dispatchEvent(new VideoBufferEvent(VideoBufferEvent.BUFFER_LOADED));			}		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function onLoadProgress(event : ProgressEvent) : void {			swfBuffer.onUpdate(loader);			var e : VideoProgressEvent = new VideoProgressEvent(VideoProgressEvent.PROGRESS);			e.bytesLoaded = loader.contentLoaderInfo.bytesLoaded;			e.bytesTotal = loader.contentLoaderInfo.bytesTotal;			dispatchEvent(e);		}	}}