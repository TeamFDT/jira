/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.listbox.ListBox * Version 	  	: 1 * Description 	: List Box *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti * Date 			: 10/02/09 *  ******************************************************************************************************************************************************************************** *  * METHODS * *		clear():void *		next():ListItem *		previous():ListItem *		selectedByID( array_id:Number ):ListItem *		addItem ( dataObject:Object ):ListItem *		scrollToItem( selectedItem:ListItem ) * * PROPERTIES *  * *		data:DataProvider *		padding:Number *		useAutoSelection() : Boolean  *		symbol() : String  *		contentList() : Array *		selectedItem *  * EVENTS *  *		ListBoxEvent.CONTENT_UPDATED *		ListBoxEvent.CONTENT_RESIZED *		ListBoxEvent.SELECT_ITEM *  ******************************************************************************************************************************************************************************** * NOTE: ******************************************************************************************************************************************************************************** * This class functions as a function / event proxy to the list container class which holds all the content  * for the ListBox  **********************************************************************************************************************************************************************************/package com.kurst.controls {	import com.kurst.controls.listbox.ListContainer;	import com.kurst.controls.listbox.core.ListItem;	import com.kurst.utils.FDelayCall;	import fl.data.DataProvider;	import flash.events.Event;	public class List extends ScrollPane {		private var listContainer : ListContainer;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				public function List() {			super();			// Delayed Function Caller			// List Container			listContainer = new ListContainer();			addEventListener(Event.ADDED_TO_STAGE, LstAddedToStage, false, 0, true);		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * 		 * 		 */		override public function setSize(w : Number, h : Number) : void {			if ( listContainer )				listContainer.setSize(w, h);			super.setSize(w, h);		}		/**		 * @property clear():Void		 * @tooltip clean all list items		 */		public function clear() : void {			// clear the list container			listContainer.clear();		}		/**		 * @property next( )		 * @tooltip select next listItem		 */		public function next() : ListItem {			// call next in the list container			return listContainer.next();		}		/**		 * @property previous( )		 * @tooltip select previous listItem		 */		public function previous() : ListItem {			// call previous in the list container			return listContainer.previous();		}		/**		 * @property selectedByID( array_id:Number )		 * @tooltip select an listItem by ID		 * @param array ID		 */		public function selectedByID(array_id : Number) : ListItem {			return listContainer.selectedByID(array_id);		}		/**		 * @property addItem ( dataObject:Object ):MovieClip		 * @tooltip add an listItem to the content list		 * @param dataObject containing listItem data		 * @return movieclip of menu listItem		 */		public function addItem(dataObject : Object) : ListItem {			// add an item to the list container			var li : ListItem = listContainer.addItem(dataObject);			// reset the scroll bounds			setScrollBounds();			// return the list item			return li;		}		/**		 * @property scrollToItem( selectedItem:listItem ):Void		 * @tooltip scroll to a menu listItem		 * @param menu listItem		 */		public function scrollToItem(selectedItem : ListItem) : void {			// if the selected item does not exits - end function			if ( selectedItem == null ) return ;			if ( ( selectedItem.y - scroll ) > height - ( selectedItem.height ) ) {				// if the list item is not in view				scroll = ( selectedItem.y - height ) + ( selectedItem.height * 2 );			} else if ( ( selectedItem.y - scroll ) < 5 ) {				// else if it is in view				// make sure the view scrolls to keep the next items in range				scroll = ( selectedItem.y - 0 ) - ( selectedItem.height );			}		}		/**		 * @property 		 * @tooltip  		 */		public function removeItem(item : ListItem) : void {			listContainer.removeItem(item);		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method $AddContainer() - PRIVATE		 * @tooltip add the container to the scroll pane		 */		public function $AddContainer() : void {			// add the list container to the scroll pane			attachMovie(listContainer);			// set the size of the list container			listContainer.setSize(width, height);		}		/**		 * @method $AssignData( dp:DataProvider ) : void - PRIVATE		 * @tooltip set the data to the listContainer		 * @param dp : DataProvider		 */		public function $AssignData(dp : DataProvider) : void {			listContainer.data = dp;			setScrollBounds();			;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @property  data ( dataObject:DataObject ):DataObject		 * @tooltip get/set the data of the list		 * @param DataObject		 * @return DataObject		 */		public function set data(dp : DataProvider) : void {			FDelayCall.addCall($AssignData, this, dp);		}		public function get data() : DataProvider {			return listContainer.data  ;		}		/**		 * @method padding		 * @tooltip get / set the padding between list items		 * @param Number		 * @return Numeber		 */		public function get padding() : Number {			return listContainer.padding;		}		public function set padding(padding : Number) : void {			listContainer.padding = padding;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get useAutoSelection() : Boolean {			return listContainer.useAutoSelection;		}		public function set useAutoSelection(autoSelection : Boolean) : void {			listContainer.useAutoSelection = autoSelection;		}		/**		 * @method symbol		 * @tooltip name of symbol used for the list box		 * @param String		 * @return String		 */		public function get listItem() : Class {			return listContainer.listItem;		}		public function set listItem(c : Class) : void {			listContainer.listItem = c;		}		/**		 * @method contentList		 * @tooltip Array containing MovieClips of list items		 * @return Array of MovieClips		 */		public function get contentList() : Vector.<ListItem> {			return listContainer.contentList;		}		/**		 * @method selectedItem		 * @tooltip get the currently selected item		 * @return ListItem		 */		public function get selectedItem() : ListItem {			return listContainer.selectedItem;		}		/**		 * @method 		 * @tooltip		 * @return 		 */		public function set selectable(flag : Boolean) : void {			listContainer.selectable = flag;		}		public function get selectable() : Boolean {			return listContainer.selectable;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method LstAddedToStage		 * @tooltip list box added to the stage event handler		 * @param e:Event		 */		private function LstAddedToStage(e : Event) : void {			FDelayCall.addCall($AddContainer, this);		}	}}