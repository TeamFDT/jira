/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.gallery3d.view.View3D * Version 	  	: 1 * Description 	: 3d Gallery View - 3d Space container  *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *		render() : void *		update () : void *		 *		getRenderer( ) : GalleryRenderer *		setRenderer( r : GalleryRenderer ) : void  *		 *		addViewportFilters( a : Array ) : void *		 *		startRender() : void *		stopRender() : void *		 *		setGallerySettings ( cs : GallerySettings , initFlag : Boolean = true ) : void *		getGallerySettings ( ) : GallerySettings *		 *		addImage( image : Bitmap , _itemData : Object = null ) : void *		addSWF( image : MovieClip , _itemData : Object = null ) : void *		 *		next () : Boolean *		previous () : Boolean *		 *		destroy() : void *		clear () : void *		 *		addEffect ( fxr : FxRenderer ) : void *	 * Get / Set *  *		styleSheet() : StyleSheet *		height *		width *		 *		useMovieClip() : Boolean *		movieClipSymbol() : String  *		 *		selectedID () : Number ( get ) *		totalItems () : Number ( get ) *		 *		autoScaleToStage ( f : Boolean ) *		 *		showStats() : Boolean *		autoSelectFirstImage() *		useThumbnail *		 *		thmbnlDataBinding *		imageDataBinding * * EVENTS *  *		Gallery3dEvent.SELECT_IMAGE *		    selectedID *		    totalItems *		    data *		    plane *		    movie *							 *							 *		Gallery3dEvent.ROLL_OUT *		    selectedID *		    totalItems *		    data *		    plane *		     *		     *		Gallery3dEvent.ROLL_OVER *		    selectedID *		    totalItems *		    data *		    plane *		     *		Gallery3dEvent.SELECT_IMAGE_ANIMATION_COMPLETE *		    selectedID *		    totalItems *		    data *		    plane *		    movie *  ******************************************************************************************************************************************************************************** **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.view {	import com.kurst.utils.FDelayCall;	import com.kurst.controls.gallery3d.fx.FxObjectRenderer;	import org.papervision3d.cameras.CameraType;	import org.papervision3d.render.QuadrantRenderEngine;	import com.kurst.controls.gallery3d.assets.CoreAsset;	import com.kurst.controls.gallery3d.assets.DynamicMaterialAsset;	import com.kurst.controls.gallery3d.assets.GalleryMaterialAsset;	import com.kurst.controls.gallery3d.fx.FxRenderer;	import com.kurst.controls.gallery3d.fx.MotionBlurEffect;	import com.kurst.controls.gallery3d.renderer.CoverFlowRenderer;	import com.kurst.controls.gallery3d.renderer.GalleryRenderer;	import com.kurst.controls.gallery3d.settings.CoverflowSettings;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.events.Gallery3dEvent;	import com.kurst.pv3d.objects.PlaneX;	import com.kurst.utils.MovieUtils;	import flash.display.Bitmap;	import flash.display.MovieClip;	import flash.display.StageQuality;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.filters.BlurFilter;	import flash.text.StyleSheet;	import flash.utils.Timer;	import org.papervision3d.core.utils.Mouse3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.materials.MovieMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.view.BasicView;	import org.papervision3d.view.layer.BitmapEffectLayer;	import org.papervision3d.view.layer.ViewportLayer;	import org.papervision3d.view.layer.util.ViewportLayerSortMode;	import org.papervision3d.view.stats.StatsView;	public class View3D extends BasicView {		public  var stats : StatsView		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var galleryGroup : Object;		private var loadedArray : Array;		private var settings : GallerySettings;		private var renderTimer : Timer;		private var dragTimer : Timer;		private var itemCounter : Number;		private var selectedPlane : PlaneX;		private var selectedRecord : Object		private var galleryRenderer : GalleryRenderer		private var useStats : Boolean = false;		private var container : DisplayObject3D;		private var isRendering : Boolean = false;		private var fxObjArray : Array		private var fxObjArrayLength : int = 0;		private var fxArray : Array		private var fxArrayLength : int = 0;		private var _styleSheet : StyleSheet;		private var _useMovieClip : Boolean = true;		private var _movieClipSymbol : String = 'com.kurst.controls.gallery3d.assets.DynamicMaterialAsset';		private var _selectedCoreAsset : CoreAsset;		private var _imageDataBinding : String = 'uri';		private var _thmbnlDataBinding : String = 'thumb';		private var _useThumbnail : Boolean = false;		private var _autoSelectFirstImg : Boolean = true;		// private var vpl					: ViewportLayer;		protected var _h : Number		protected var _w : Number		private var importDMAClass : DynamicMaterialAsset;		// Include Class in compiler		private var importGMAClass : GalleryMaterialAsset;		// Include Class in compiler		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// TEST		private var bfx : BitmapEffectLayer;		private var useEffects : Boolean = false;		private var vplTest : Boolean = false;		private var indexLayerTest : Number = 5;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function View3D(viewportWidth : Number = 640, viewportHeight : Number = 480, scaleToStage : Boolean = true, interactive : Boolean = true, cameraType : String = 'Free') {			// Pass the constructor settings to the papervision super class			super(viewportWidth, viewportHeight, scaleToStage, true, cameraType);			viewport.interactive = true;			/*
			vpl = new ViewportLayer(viewport, null);
			vpl.layerIndex = 100
			vpl.sortMode = ViewportLayerSortMode.INDEX_SORT;
			vpl.forceDepth = true;						viewport.containerSprite.addLayer( vpl );			 */			// viewport.containerSprite.buttonMode = true;			// _height 	= viewportHeight			// _width 		= viewportWidth			addEventListener(Event.ADDED_TO_STAGE, AddedToStage, false, 0, true);		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method renderFrame		 * @tooltip		 */		public function render() : void {			renderTick();		}		/**		 * @method update () : void		 * @tooltip redraw the interface		 */		public function update() : void {			// Reposition / Re-draw the view			if ( galleryRenderer != null && loadedArray != null ) {				if ( loadedArray.length > 1 && selectedRecord != null )					galleryRenderer.render(-1)			}		}		/**		 * @method getRenderer		 * @tooltip return the gallery renderer		 */		public function getRenderer() : GalleryRenderer {			return galleryRenderer;		}		/**		 * @method setRenderer( r : GalleryRenderer ) : void		 * @tooltip assign a renderer to the View		 * @param r : GalleryRenderer - GalleryRenderer		 */		public function setRenderer(r : GalleryRenderer) : void {			stopRender();			// Store selection state			var isDeselected : Boolean = false;			if ( galleryRenderer != null ) {				isDeselected = galleryRenderer.isDeselected				galleryRenderer.destroy();				galleryRenderer.removeEventListener(Gallery3dEvent.SCROLL_COMPLETE, AnimationComplete)				galleryRenderer = null;			}			galleryRenderer = r;			galleryRenderer.width = width			galleryRenderer.height = height			galleryRenderer.init(renderer, scene, _camera, viewport);			camera.target = new DisplayObject3D()			galleryRenderer.addEventListener(Gallery3dEvent.SCROLL_COMPLETE, AnimationComplete, false, 0, true);			if ( settings != null )				galleryRenderer.setGallerySettings(settings);			if ( loadedArray != null ) {				galleryRenderer.setRenderData(loadedArray);				if ( loadedArray.length > 1 && selectedRecord != null ) {					if ( isDeselected ) {						galleryRenderer.render(selectedRecord._id)						galleryRenderer.render(-1)					} else {						galleryRenderer.render(selectedRecord._id)					}				}			}			startRender();		}		/**		 * @method addViewpotFilters( a : Array ) : void 		 * @tooltip add filters to the 3d viewport		 * @param Array of filters		 */		public function addViewportFilters(a : Array) : void {			viewport.filters = a;		}		/**		 * @method startRender() : void		 * @tooltip start the render loop		 */		public function startRender() : void {			if ( renderTimer != null )				renderTimer.start();			isRendering = true		}		/**		 * @method stopRender() : void		 * @tooltip stop the render loop		 */		public function stopRender() : void {			if ( renderTimer != null )				renderTimer.stop();			isRendering = false		}		/**		 * @method setCoverflowSettings ( o : CoverflowSettings , initFlag : Boolean = true ) : void		 * @tooltip 		 * @param o : CoverflowSettings		 * 					CoverFlowSettings object see 'com.kurst.controls.coverflow.CoverflowSettings'		 * 							 * @param initFlag : Boolean = true 		 * 					initialize the 3d with the new settings		 */		public function setGallerySettings(cs : GallerySettings, initFlag : Boolean = true) : void {			settings = cs			if ( camera != null ) {				camera.fov = settings.cameraFov;				camera.zoom = settings.cameraZoom;			}			if ( initFlag ) init3D();			if ( selectedRecord != null ) navigateTo(selectedRecord._id, true);			if ( renderTimer != null ) renderTimer.delay = settings.renderDelay;			if ( galleryRenderer != null ) {				if ( loadedArray != null ) {					if ( loadedArray.length > 1 && selectedRecord != null )						galleryRenderer.render(selectedRecord._id)				}			}		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function getGallerySettings() : GallerySettings {			return settings;		}		/**		 * @method addImage( image : Bitmap ) : void		 * @tooltip add an image to the gallery		 * @param image / Bitmap		 */		public function addImage(image : Bitmap, _itemData : Object = null) : void {			// trace('view3d.addImage: ' + _itemData.image );			if ( loadedArray == null ) loadedArray = new Array();			var rec : Object = addImageToScene(image, _itemData);			loadedArray.push(rec);			galleryRenderer.initNewItem(rec);			galleryRenderer.setRenderData(loadedArray);			navigateTo(selectedRecord._id, true);			if ( itemCounter == 1 && !_autoSelectFirstImg )				galleryRenderer.render(-1, true);		}		/**		 * @method addImage( image : Bitmap ) : void		 * @tooltip add an image to the gallery		 * @param image / Bitmap		 */		public function addSWF(image : MovieClip, _itemData : Object = null) : void {			if ( loadedArray == null ) loadedArray = new Array();			var rec : Object = addSWFToScene(image, _itemData);			loadedArray.push(rec);			galleryRenderer.initNewItem(rec);			galleryRenderer.setRenderData(loadedArray);			navigateTo(selectedRecord._id, true);			if ( itemCounter == 1 && !_autoSelectFirstImg )				galleryRenderer.render(-1, true);		}		/**		 * @method next ():Boolean		 * @tooltip go to the next image - if its available		 * @return Boolean - true if successfull		 */		public function next() : Boolean {			if ( selectedRecord == null ) return false;			var id : int = selectedRecord._id + 1;			if ( id > loadedArray.length - 1 ) id = 0;			if ( loadedArray[ id ] != null ) {				navigateTo(id);				return true;			} else {				return false;			}		}		/**		 * @method  previous () : Boolean		 * @tooltip o to the previous image - if its available		 * @return Boolean - true if successfull		 */		public function previous() : Boolean {			if ( selectedRecord == null ) return false;			var id : int = selectedRecord._id - 1;			if ( id < 0 ) id = loadedArray.length - 1			if ( loadedArray[ id ] != null ) {				navigateTo(id);				return true;			} else {				return false;			}		}		public function goto(id : Number) : Boolean {			if ( selectedRecord == null ) return false;			if ( loadedArray[ id ] == null ) return false;			// var id : int = loadedArray[ id ]._id;			navigateTo(id);			return true;		}		/**		 * @method destroy() : void		 * @tooltip destroy the view - clear up RAM / Images		 */		public function destroy(preserveScene : Boolean = false) : void {			var p : PlaneX;			for ( var i : String in loadedArray ) {				p = loadedArray[i].plane;				p.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);				p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);				p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);				if ( _useMovieClip ) {					var ca : CoreAsset = ( ( p.material as MovieMaterial ).movie as CoreAsset )					ca.destroy();				}				scene.removeChild(p);				p.material.interactive = false;				p.material.bitmap.dispose();				p.material.destroy();				loadedArray[i] = null;			}			loadedArray = null			renderTimer.stop();			itemCounter = 0;			if ( preserveScene ) loadedArray = new Array();			selectedPlane = null;			selectedRecord = null;			if ( !preserveScene ) {				settings = null;				// renderTimer				= new Timer( 25 )				renderTimer.removeEventListener(TimerEvent.TIMER, renderTick);				renderTimer = null;				dragTimer.removeEventListener(TimerEvent.TIMER, DragTimerEvent);				dragTimer = null;				viewport.destroy();				renderer.destroy();				if ( stage != null ) {					stage.removeEventListener(MouseEvent.MOUSE_DOWN, MouseDown)					stage.removeEventListener(MouseEvent.MOUSE_UP, MouseUp);				}				if ( galleryRenderer != null ) {					galleryRenderer.destroy();					galleryRenderer.removeEventListener(Gallery3dEvent.SCROLL_COMPLETE, AnimationComplete)					galleryRenderer = null;				}			}		}		/**		 * @method clear() : void		 * @tooltip clear the view - clear up RAM / Images - can still add images to 3d view		 */		public function clear() : void {			renderTimer.stop();			var p : PlaneX;			for ( var i : String in loadedArray ) {				p = loadedArray[i].plane as PlaneX;				p.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);				p.material.interactive = false;				p.material.bitmap.dispose();				p.material.destroy();				scene.removeChild(p);				loadedArray[i] = null;			}			itemCounter = 0;			loadedArray = null;			selectedPlane = null;			selectedRecord = null;		}		/**		 * @method addEffect ( fxr : FxRenderer ) : void		 * @tooltip add an effect to the gallery ( must extend FxRenderer )		 */		public function addEffect(fxr : FxRenderer) : void {			fxr.init(renderer, scene, camera, viewport);			fxArray.push(fxr);			fxArrayLength = fxArray.length;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function addEffectObject(fxObj : FxObjectRenderer) : void {			fxObj.init(renderer, scene, camera, viewport);			fxObjArray.push(fxObj);			fxObjArrayLength = fxObjArray.length;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method styleSheet		 * @tooltip get / set the stylesheet		 * @param StyleSheet		 * @return StyleSheet		 */		public function get styleSheet() : StyleSheet {			return _styleSheet;		}		public function set styleSheet(styleSheet : StyleSheet) : void {			_styleSheet = styleSheet;			applyStyleSheet(_styleSheet);		}		/**		 * @method height		 * @tooltip set the height of the 3D viewport		 * @param		 * @return		 */		override public function set height(h : Number) : void {			viewport.viewportHeight = h			_h = h		}		/**		 * @method 		 * @tooltip set the width of the 3D viewport		 * @param		 * @return		 */		override public function set width(w : Number) : void {			viewport.viewportWidth = w			_w = w;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function get height() : Number {			return _h		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function get width() : Number {			return _w		}		/**		 * @method		 * @tooltip		 * @param		 * @return		 */		public function get useMovieClip() : Boolean {			return _useMovieClip;		}		public function set useMovieClip(useMovieClip : Boolean) : void {			_useMovieClip = useMovieClip;		}		/**		 * @method		 * @tooltip		 * @param		 * @return		 */		public function get movieClipSymbol() : String {			return _movieClipSymbol;		}		public function set movieClipSymbol(movieClipSymbol : String) : void {			_movieClipSymbol = movieClipSymbol;		}		/**		 * @method selectedID		 * @tooltip		 * @param		 * @return		 */		public function get selectedID() : Number {			if ( selectedRecord == null ) {				return -1 ;			} else {				return selectedRecord._id;			}		}		/**		 * @method totalItems		 * @tooltip		 * @param		 * @return		 */		public function get totalItems() : Number {			if ( loadedArray == null ) {				return -1 ;			} else {				return loadedArray.length - 1;			}		}		/**		 * @method GET / SET autoScaleToStage		 * @tooltip auto scale the viewport to the stage		 * @param Boolean		 * @return Boolean		 */		public function set autoScaleToStage(f : Boolean) : void {			viewport.autoScaleToStage = f;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get autoScaleToStage() : Boolean {			return viewport.autoScaleToStage;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get showStats() : Boolean {			return useStats;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function set showStats(useStats : Boolean) : void {			this.useStats = useStats;			displayStats();		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get autoSelectFirstImage() : Boolean {			return _autoSelectFirstImg;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function set autoSelectFirstImage(autoSelectFirstImg : Boolean) : void {			_autoSelectFirstImg = autoSelectFirstImg;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get useThumbnail() : Boolean {			return _useThumbnail;		}		public function set useThumbnail(useThumbnail : Boolean) : void {			_useThumbnail = useThumbnail;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get thmbnlDataBinding() : String {			return _thmbnlDataBinding;		}		public function set thmbnlDataBinding(thmbnlDataBinding : String) : void {			_thmbnlDataBinding = thmbnlDataBinding;		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		public function get imageDataBinding() : String {			return _imageDataBinding;		}		public function set imageDataBinding(imageDataBinding : String) : void {			_imageDataBinding = imageDataBinding;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method init() : void		 * @tooltip initialize the gallery variables		 */		private function init() : void {			fxArray = new Array();			fxObjArray = new Array();			galleryGroup = new Object();			loadedArray = new Array();			itemCounter = 0;		}		/**		 * @method init3D() : void 		 * @tooltip initialize the 3D gallery variables.		 */		private function init3D() : void {			if ( container == null ) {				Mouse3D.enabled = true;				viewport.containerSprite.sortMode = ViewportLayerSortMode.Z_SORT;				// 31 08 09				viewport.autoCulling = true;				viewport.autoClipping = true;				camera.x = 0;				camera.y = 0;				camera.z = settings.cameraInitZ;				camera.target = new DisplayObject3D();				container = new DisplayObject3D();				// container.				// container.useOwnContainer			= true;				// vpl.addDisplayObject3D( container );				scene.addChild(container, 'contentContainer');				// container.container.layerIndex		= 3;			}			// renderer = new QuadrantRenderEngine(QuadrantRenderEngine.CORRECT_Z_FILTER);			// trace('useQuadRenderer');			camera.zoom = settings.cameraZoom;			camera.fov = settings.cameraFov;			if ( loadedArray != null ) {				var p : Plane;				var m : MovieMaterial;				var c : CoreAsset;				for ( var i : int = 0 ; i < loadedArray.length ; i++ ) {					p = loadedArray[ i ].plane as Plane;					m = p.material as MovieMaterial;					c = m.movie as CoreAsset;					c.thumbQuality = settings.thumbQuality;					if ( i != selectedID )						m.precise = settings.usePreciseMaterial;					m.movieTransparent = settings.movieMaterialTransparent					p.segmentsH = settings.segmentsH;					p.segmentsW = settings.segmentsW;				}			}			displayStats();		}		/**		 * @method addToScene(  image : Bitmap ) : Object		 * @tooltip		 * @param image - Bitmap		 * @return Object		 * 			object._id		 * 			objecy.plane		 */		private function addImageToScene(image : Bitmap, _itemData : Object = null) : Object {			var record : Object = new Object();			record._id = itemCounter			record.id = itemCounter			var p : PlaneX			if ( _useMovieClip ) {				var mc : CoreAsset = MovieUtils.createMcFromLinkageID(_movieClipSymbol) as CoreAsset;				mc.thumbQuality = settings.thumbQuality;				mc.useThumbnail = useThumbnail;				mc.addImage(image);				if ( _itemData != null )					mc.data = _itemData				if ( _styleSheet != null )					mc.styleSheet = _styleSheet				var mca : MovieMaterial = new MovieMaterial(mc, settings.movieMaterialTransparent, false, settings.usePreciseMaterial)				mca.doubleSided = settings.doubleSided;				mca.smooth = ( itemCounter == 0 ) ? true : false;				mca.interactive = settings.interactive;				mca.precise = settings.usePreciseMaterial;				mca.pixelPrecision = settings.pixelPrecision;				;				mc.movieMaterial = mca;				p = new PlaneX(mca, 0, 0, settings.segmentsW, settings.segmentsH);				mc.plane = p;			} else {				var m : BitmapMaterial = new BitmapMaterial(image.bitmapData, false);				m.doubleSided = true;				m.smooth = ( itemCounter == 0 ) ? true : false;				m.interactive = settings.interactive;				// trace('2 settings.interactive: ' + settings.interactive );				m.precise = settings.usePreciseMaterial;				m.doubleSided = true;				p = new PlaneX(m, 0, 0, settings.segmentsW, settings.segmentsH);			}			p.name = String(itemCounter);			p.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane, false, 0, true);			p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane, false, 0, true);			p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane, false, 0, true);			p.useOwnContainer = true;			record.plane = p;			if ( useEffects ) {				bfx.addDisplayObject3D(p);			}			if ( _itemData != null ) {				if ( MovieUtils.functionExists(_itemData, 'copyToObject') ) {					_itemData.copyToObject(record);				} else {					for ( var i : String in _itemData ) {						record[i] = _itemData[i];					}				}			}			if ( itemCounter == 0  ) {				selectedPlane = p;				selectedRecord = record;				var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SELECT_IMAGE, true)				ge.selectedID = selectedRecord._id;				ge.totalItems = loadedArray.length - 1;				ge.data = selectedRecord;				ge.plane = selectedRecord.plane;				ge.movie = mc as DynamicMaterialAsset;				FDelayCall.addCall(initFirstImageEvent, this, ge);			}			// vpl.addDisplayObject3D( p )			container.addChild(p);			/*			if ( vplTest ){							var vpl : ViewportLayer 	= new ViewportLayer( viewport , null );							viewport.containerSprite.addLayer( vpl );								vpl.layerIndex			= indexLayerTest++			vpl.addDisplayObject3D( p );						}			 */			initCoreAsset(mc);			itemCounter++;			FDelayCall.addCall(itemAdded, this, record, p, mc as DynamicMaterialAsset);			return record;		}		/**		 * @method addToScene(  image : Bitmap ) : Object		 * @tooltip		 * @param image - Bitmap		 * @return Object		 * 			object._id		 * 			objecy.plane		 */		private function addSWFToScene(m : MovieClip, _itemData : Object = null) : Object {			var record : Object = new Object();			record._id = itemCounter			record.id = itemCounter			var p : PlaneX			var mc : CoreAsset = MovieUtils.createMcFromLinkageID(_movieClipSymbol) as CoreAsset;			mc.addSWF(m);			if ( _itemData != null )				mc.data = _itemData			if ( _styleSheet != null )				mc.styleSheet = _styleSheet			var mca : MovieMaterial = new MovieMaterial(mc, settings.movieMaterialTransparent, false, settings.usePreciseMaterial)			mca.doubleSided = settings.doubleSided;			mca.smooth = ( itemCounter == 0 ) ? true : false;			mca.interactive = settings.interactive;			mca.precise = settings.usePreciseMaterial;			mc.movieMaterial = mca;			mca.pixelPrecision = settings.pixelPrecision;			p = new PlaneX(mca, 0, 0, settings.segmentsW, settings.segmentsH);			mc.plane = p;			p.name = String(itemCounter);			p.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane, false, 0, true);			p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane, false, 0, true);			p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane, false, 0, true);			p.useOwnContainer = true;			record.plane = p;			/*				if ( useEffects ){							p.filters = [new BlurFilter()]			bfx.addDisplayObject3D( p );			}*/			if ( _itemData != null ) {				if ( MovieUtils.functionExists(_itemData, 'copyToObject') ) {					_itemData.copyToObject(record);				} else {					for ( var i : String in _itemData )						record[i] = _itemData[i];				}			}			// vpl.addDisplayObject3D( p )			container.addChild(p);			if ( itemCounter == 0  ) {				selectedPlane = p;				selectedRecord = record;				var dma : DynamicMaterialAsset = mc as DynamicMaterialAsset;				dma.MouseDown();				var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SELECT_IMAGE, true)				ge.selectedID = selectedRecord._id;				ge.totalItems = loadedArray.length - 1;				ge.data = selectedRecord;				ge.plane = selectedRecord.plane;				ge.movie = dma				FDelayCall.addCall(initFirstImageEvent, this, ge);			}			initCoreAsset(mc);			itemCounter++;			FDelayCall.addCall(itemAdded, this, record, p, dma);			return record;		}		/**		 * @method 		 * @tooltip		 * @param 		 * @return		 */		private function itemAdded(data : Object, plane : Plane, ca : CoreAsset) : void {			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.ITEM_ADDED, true)			ge.data = data;			ge.plane = plane;			ge.movie = ca;			dispatchEvent(ge);		}		/**		 * @method 		 * @tooltip		 * @param 		 * @return		 */		private function initFirstImageEvent(ge : Gallery3dEvent) : void {			dispatchEvent(ge);			for ( var c : uint = 0 ; c < fxArrayLength ; c++ )				fxArray[c].navigateTo(ge);			for ( var e : uint = 0 ; e < fxObjArrayLength ;  e++ )				fxObjArray[e].select(ge);		}		/**		 * @method		 * @tooltip		 * @param		 */		private function initCoreAsset(ca : CoreAsset) : void {			ca.useThumbnail = useThumbnail;			ca.imageDataBinding = imageDataBinding;			ca.thmbnlDataBinding = thmbnlDataBinding;		}		/**		 * @method navigateTo( id : Number ) : void		 * @tooltip		 * @param id : Number - plane to select		 */		private function navigateTo(id : Number, invalidate : Boolean = false, p : PlaneX = null) : void {			/*if ( selectedRecord != null ) { // Removed 10.03.10			// if ( Number( id ) == Number( selectedRecord._id ) && ! invalidate && galleryRenderer.isDeselected ) return;			if ( Number( id ) == Number( selectedRecord._id ) && ! invalidate && ! galleryRenderer.isDeselected ) return;			}			// */			galleryRenderer.render(id, invalidate);			if ( selectedPlane != null ) {				var prevMat : MovieMaterial = selectedPlane.material as MovieMaterial;				prevMat.smooth = false;			}			if ( !invalidate && settings.autoQuality ) stage.quality = settings.stageQualityModeLow			selectedRecord = loadedArray[ id ];			selectedPlane = selectedRecord.plane;			var mat : MovieMaterial = selectedPlane.material as MovieMaterial;			mat.smooth = true;			if ( !invalidate ) {				var dma : CoreAsset = mat.movie as CoreAsset				var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SELECT_IMAGE, true)				ge.selectedID = selectedRecord._id;				ge.totalItems = loadedArray.length - 1;				ge.data = selectedRecord;				ge.plane = selectedRecord.plane				ge.movie = dma;				dispatchEvent(ge);				for ( var c : uint = 0 ; c < fxArrayLength ; c++ )					fxArray[c].navigateTo(ge);				for ( var e : uint = 0 ; e < fxObjArrayLength ;  e++ ) {					fxObjArray[e].select(ge);				}			}			if ( _useMovieClip ) {				var ca : CoreAsset = ( ( selectedPlane.material as MovieMaterial ).movie as CoreAsset );				if ( _selectedCoreAsset != null ) {					if ( _selectedCoreAsset != ca ) {						_selectedCoreAsset.unSelect();						// Note = DO fxObjArray Deselect HEre;					}					ca.select();					ca.MouseDown();					_selectedCoreAsset = ca;				} else {					ca.MouseDown();					ca.select();					_selectedCoreAsset = ca;				}			}		}		/**		 * @method		 * @tooltip		 * @param 		 * @return 		 */		private function displayStats() : void {			//			// trace('useStats' + useStats );			if ( useStats ) {				stats = new StatsView(renderer);				stats.x = 40;				stats.y = 42;				addChild(stats);			} else {				if ( stats != null ) {					removeChild(stats);					stats = null;				}			}		}		/**		 * @method 		 * @tooltip		 */		private function createBitmapEffectLayer() : void {			viewport.containerSprite.sortMode = ViewportLayerSortMode.INDEX_SORT			bfx = new BitmapEffectLayer(viewport, stage.stageWidth, stage.stageHeight, true);			bfx.layerIndex = 2500;			viewport.containerSprite.addLayer(bfx);			var mbe : MotionBlurEffect = new MotionBlurEffect();			mbe.blurLevel = .7			bfx.addEffect(mbe);			viewport.containerSprite.sortChildLayers()		}		/**		 * @method 		 * @tooltip		 */		private function applyStyleSheet(css : StyleSheet) : void {			for ( var c : int = 0 ; c < loadedArray.length ; c++ ) {				var plane : PlaneX = loadedArray.plane as PlaneX;				if ( plane != null ) {					var ca : CoreAsset = ( ( plane.material as MovieMaterial ).movie as CoreAsset );					ca.styleSheet = css;				}			}		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private function onLargeImageLoaded(event : Gallery3dEvent) : void {			if ( !isNaN(selectedID) ) {				galleryRenderer.sID = selectedID + 1;				galleryRenderer.render(selectedID);			}		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function OutPlane(e : InteractiveScene3DEvent) : void {			if ( _useMovieClip ) {				var ca : CoreAsset = ( ( e.displayObject3D.material as MovieMaterial ).movie as CoreAsset );				ca.MouseRollOut()				if ( loadedArray != null ) {					var id : Number = Number(e.displayObject3D.name);					var rec : Object = loadedArray[ id ];					var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.ROLL_OUT, true)					ge.selectedID = rec._id;					ge.totalItems = loadedArray.length - 1;					ge.data = rec;					ge.plane = rec.plane					dispatchEvent(ge);				}			}		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function OverPlane(e : InteractiveScene3DEvent) : void {			if ( _useMovieClip ) {				var ca : CoreAsset = ( ( e.displayObject3D.material as MovieMaterial ).movie as CoreAsset );				ca.MouseRollOver()				var id : Number = Number(e.displayObject3D.name);				var rec : Object = loadedArray[ id ];				var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.ROLL_OVER, true)				ge.selectedID = rec._id;				ge.totalItems = loadedArray.length - 1;				ge.data = rec;				ge.plane = rec.plane				dispatchEvent(ge);			}		}		/**		 * @method SelectPlane( e : InteractiveScene3DEvent ) : void		 * @tooltip		 * @param e : InteractiveScene3DEvent		 */		private function SelectPlane(e : InteractiveScene3DEvent) : void {			var id : Number = Number(e.displayObject3D.name);			navigateTo(id);		}		/**		 * @method 		 * @tooltip		 * @param 		 */		private function DragTimerEvent(e : TimerEvent) : void {			galleryRenderer.DragEvent(stage.mouseX, stage.mouseY);		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function AddedToStage(e : Event) : void {			if ( useEffects )				createBitmapEffectLayer();			removeEventListener(Event.ADDED_TO_STAGE, AddedToStage);			stage.addEventListener(MouseEvent.MOUSE_DOWN, MouseDown, false, 0, true)			stage.addEventListener(MouseEvent.MOUSE_UP, MouseUp, false, 0, true)			// Assign Default Gallery Settings			setGallerySettings(new GallerySettings());			// Assign Default renderer with default settings			setRenderer(new CoverFlowRenderer(new CoverflowSettings()));			// Render Interval Timer			renderTimer = new Timer(settings.renderDelay);			renderTimer.addEventListener(TimerEvent.TIMER, renderTick, false, 0, true);			if ( isRendering )				renderTimer.start();			dragTimer = new Timer(settings.dragDelay);			dragTimer.addEventListener(TimerEvent.TIMER, DragTimerEvent, false, 0, true);			init();			init3D();		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function MouseUp(m : MouseEvent) : void {			dragTimer.stop();			galleryRenderer.MouseUpEvent(m);		}		/**		 * @method SelectPlane( e : InteractiveScene3DEvent ) : void		 * @tooltip		 * @param e : InteractiveScene3DEvent		 */		private function MouseDown(m : MouseEvent) : void {			if ( this.hitTestPoint(stage.mouseX, stage.mouseY) ) {				// trace('MOUSE_DOWN')				if ( dragTimer != null )					dragTimer.start();				galleryRenderer.MouseDownEvent(m);			}		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function AnimationComplete(e : Event) : void {			if ( settings.autoQuality ) stage.quality = settings.stageQualityModeHigh;			var mat : MovieMaterial = selectedPlane.material as MovieMaterial;			var dma : DynamicMaterialAsset = mat.movie as DynamicMaterialAsset			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SELECT_IMAGE_ANIMATION_COMPLETE, true)			ge.selectedID = selectedRecord._id;			ge.totalItems = loadedArray.length - 1;			ge.data = selectedRecord;			ge.plane = selectedRecord.plane			ge.movie = dma;			dispatchEvent(ge);			// trace('AnimationComplete - fxObjArrayLength: ' + fxObjArrayLength )			/*			for ( var d: uint = 0 ; d < fxObjArrayLength ;  d++ ){							trace('AnimationComplete - SelectFx fxObjArrayLength: ' + fxObjArrayLength + ' d: ' + d)			fxObjArray[d].select( ge );							}*/		}		/**		 * @method		 * @tooltip		 * @param 		 */		private function renderTick(event : Event = null) : void {			for ( var c : uint = 0 ; c < fxArrayLength ; c++ )				fxArray[c].render();			if ( !isNaN(_camera.z) ) {				galleryRenderer.renderCamera(camera, stage);				renderer.renderScene(scene, _camera, viewport);				// super.onRenderTick(event);			}		}		/*		override protected function onRenderTick(event:Event = null):void{		}*/	}}