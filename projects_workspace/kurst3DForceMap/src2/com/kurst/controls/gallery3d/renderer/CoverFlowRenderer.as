/******************************************************************************************************************************************************************************** *  * Class Name  	: karimbeyrouti * Version 	  	: com.kurst.controls.gallery3d.renderer.CoverFlowRenderer * Description 	: CoverFlow Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		destroy() * 		setRenderData( a : Array ) : void * 		setGallerySettings( settings : GallerySettings ) : void * 		setRenderSettings( s : * ) : void * 		getRenderSettings( ) : * * 		render( selectedID : Number,  invalidate : Boolean = false ) : void * * EVENTS *  * 		Gallery3dEvent.SCROLL_COMPLETE *  ******************************************************************************************************************************************************************************** * 				: **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.renderer {	import flash.display.DisplayObject;	import com.kurst.controls.gallery3d.assets.CoreAsset;	import com.kurst.controls.gallery3d.settings.CoverflowSettings;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.events.Gallery3dEvent;	import com.kurst.pv3d.objects.PlaneX;	import com.kurst.utils.MovieUtils;	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.ColorTransform;	import com.greensock.*	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.materials.MovieMaterial;	public class CoverFlowRenderer extends GalleryRenderer implements IGalleryRenderer {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _settings : GallerySettings;		private var _renderSettings : CoverflowSettings		private var data : Array;		private var selectedID : Number;		// private var selectedRecord 		: Object;		private var initFlag : Boolean = false;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function CoverFlowRenderer(settings : CoverflowSettings) {			_renderSettings = settings;		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		override public function destroy() : void {			// TweenMax.killAllDelayedCalls();			var ctLight : ColorTransform = new ColorTransform();			// new ColorTransform( 1, 1, 1, 1, 25, 25, 25, 0);			ctLight.redMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.blueMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.greenMultiplier = _renderSettings.rollOverLightMultiplier			if ( data != null ) {				for ( var j : int = 0 ; j < data.length ; j++ ) {					var r : Object = data[j];					if ( r != null ) {						var p : PlaneX = r.plane;						if ( p.extra.isDark && _renderSettings.rollOverLightEffect ) {							applyColourTransform(p, ctLight);							p.extra.isDark = false;						}						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					}				}			}			_settings = null;			data = null;			selectedID = undefined;			selectedRecord = null;			_renderSettings = null;			super.destroy()		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function renderCamera(_camera : CameraObject3D, s : Stage = null) : void {			_camera.x += ( (  0 - _camera.x ) * _renderSettings.animationCameraSpeed ) + _renderSettings.cameraXOffset;			_camera.y += ( (  0 - _camera.y ) * _renderSettings.animationCameraSpeed ) + _renderSettings.cameraYOffset;			_camera.z += ( ( _renderSettings.cameraZOffset - _camera.z ) * _renderSettings.animationCameraSpeed );		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function render(_selectedID : Number, invalidate : Boolean = false) : void {			if ( _selectedID < 0 ) return ;			var id : Number = _selectedID;			var redraw : Boolean = ( selectedID != id );			// var redraw			: Boolean	= userEdit ? true : ( selectedID != id );			// trace('redraw: ' + redraw );			selectedID = _selectedID;			selectedRecord = data[ id ];			// Record of new plane			var selectedPlane : PlaneX = selectedRecord.plane;			var nextID : int = selectedRecord._id;			// id of new plane			var i : int = 0			// Loop - Counter			var rec : Object			// Loop - Record			var p : PlaneX			// Loop - Plane			var downCounter : int = nextID ;			// Loop - Counter for planes before the selected one			var upCounter : int = 1;			// Loop - Counter for planes after the selected one			var tweenTime : Number = _renderSettings.animationTime;			// Tween Duration			var easeFnc : Function = _renderSettings.animationEasingFunction			// Tween Easing			var calcDelay : Number = 0;			var correctiveZ : Number			var l : uint = data.length;			var ctDark : ColorTransform = new ColorTransform();			ctDark.redMultiplier = _renderSettings.rollOverDarkMultiplier			ctDark.blueMultiplier = _renderSettings.rollOverDarkMultiplier			ctDark.greenMultiplier = _renderSettings.rollOverDarkMultiplier			var ctLight : ColorTransform = new ColorTransform();			ctLight.redMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.blueMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.greenMultiplier = _renderSettings.rollOverLightMultiplier			var tX : Number, 			tY : Number, 			tZ : Number, 			tS : Number, 			trY : Number, 			trX : Number, 			tA : Number;			// ------------------------------------------------------------------------------------------------------			// reposition all planes / items on display			// ------------------------------------------------------------------------------------------------------			for ( i ; i < l ; i++ ) {				correctiveZ = i * -1 / 2;				// 10;				if ( !initFlag && !invalidate )					calcDelay += _renderSettings.animationInitialDrawTime;				rec = data[i];				p = rec.plane;				p.visible = true;				tA = ( rec._id == nextID ) ? _renderSettings.alphaSelected : _renderSettings.alpha;				/*				var ca : CoreAsset 	= ( ( p.material as MovieMaterial ).movie as CoreAsset ) 				ca.thumbQuality = _renderSettings.thumbnailQuality; 				 */				// ------------------------------------------------------------------------------------------------------				// Colour Transform				// ------------------------------------------------------------------------------------------------------				if ( p.extra == null ) p.extra = new Object();				if ( p.extra.isDark == null ) p.extra.isDark = false;				if ( !p.extra.isDark && _renderSettings.rollOverLightEffect && rec._id != nextID ) {					applyColourTransform(p, ctDark)					p.extra.isDark = true				} else if ( rec._id == nextID && _renderSettings.rollOverLightEffect && p.extra.isDark ) {					applyColourTransform(p, ctLight)					p.extra.isDark = false				}				// ------------------------------------------------------------------------------------------------------				// Precise Material				// ------------------------------------------------------------------------------------------------------				if ( !_settings.usePreciseMaterial && rec._id != nextID ) {					setPrecise(p, false);				} else if ( !_settings.usePreciseMaterial && rec._id == nextID ) {					setPrecise(p, true);				}				// ------------------------------------------------------------------------------------------------------				// Smooth Selected Bitmap				// ------------------------------------------------------------------------------------------------------				p.material.smooth = ( rec._id == nextID ) ? true : false;				// ------------------------------------------------------------------------------------------------------				// Position for all items before the selected plane - LEFT of Selected image				// ------------------------------------------------------------------------------------------------------				if ( rec._id < nextID ) {					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					if ( _renderSettings.selectedPosFlag ) {						if ( _renderSettings.isVertical ) {							tX = ( downCounter * _renderSettings.planeSpacing * -1 ) - ( selectedPlane.heightNoScale * 2 * _renderSettings.selectedScale ) + _renderSettings.selectedX							// + _renderSettings.spacingLeftOffset						} else {							tX = ( downCounter * _renderSettings.planeSpacing * -1 ) - ( selectedPlane.widthNoScale * 2 * _renderSettings.selectedScale ) + _renderSettings.selectedX						}					} else {						tX = ( downCounter * _renderSettings.planeSpacing * -1 ) - _renderSettings.spacingSelected + _renderSettings.spacingLeftOffset;					}					tY = _renderSettings.planeY;					tZ = _renderSettings.planeZ - ( correctiveZ * -1 );					tS = _renderSettings.planeScale;					trY = ( _renderSettings.isVertical ) ? _renderSettings.planeRotationY : -1 * _renderSettings.planeRotationY;					trX = _renderSettings.selectedXRotation;					downCounter--;					// ------------------------------------------------------------------------------------------------------					// Position for all items after the selected plane - RIGHT of Selected image					// ------------------------------------------------------------------------------------------------------				} else if ( rec._id > nextID ) {					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					if ( _renderSettings.selectedPosFlag ) {						if ( _renderSettings.isVertical ) {							tX = ( upCounter * _renderSettings.planeSpacing ) + ( selectedPlane.heightNoScale * 2 * _renderSettings.selectedScale ) + _renderSettings.selectedX						} else {							tX = ( upCounter * _renderSettings.planeSpacing ) + ( selectedPlane.widthNoScale * 2 * _renderSettings.selectedScale ) + _renderSettings.selectedX						}					} else {						tX = ( upCounter * _renderSettings.planeSpacing ) + _renderSettings.spacingSelected;					}					tY = _renderSettings.planeY;					tZ = _renderSettings.planeZ - ( correctiveZ );					tS = _renderSettings.planeScale;					trY = ( _renderSettings.isVertical ) ? _renderSettings.planeRotationY * -1 : _renderSettings.planeRotationY;					trX = _renderSettings.planeRotationX;					upCounter++;					// ------------------------------------------------------------------------------------------------------					// Position for the selected plane					// ------------------------------------------------------------------------------------------------------				} else if ( rec._id == nextID ) {					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					tX = _renderSettings.selectedX;					tY = _renderSettings.selectedY;					tZ = _renderSettings.seletedZ;					tS = _renderSettings.selectedScale;					trY = _renderSettings.selectedYRotation;					trX = _renderSettings.selectedXRotation;				}				// ------------------------------------------------------------------------------------------------------				// Position the plane for the selected plane				// ------------------------------------------------------------------------------------------------------				var spritePropsChanged : Boolean = p.rotationX != trX || p.rotationY != trY || p.scale != tS || p.alpha != tA || p.x != tX || p.y != tY || p.z != tZ				if ( invalidate && spritePropsChanged && !TweenMax.isTweening(p) ) {					TweenMax.killTweensOf(p);					if ( _renderSettings.isVertical ) {						p.rotationX = trY;						p.rotationY = trX;						p.scale = tS;						p.alpha = tA;						p.x = tY;						p.y = tX;						p.z = tZ;					} else {						p.rotationX = trX;						p.rotationY = trY;						p.scale = tS;						p.alpha = tA;						p.x = tX;						p.y = tY;						p.z = tZ;					}				} else if ( redraw && spritePropsChanged  ) {					TweenMax.killTweensOf(p)					var tweenParams : Object = new Object();					if ( _renderSettings.isVertical ) {						tweenParams.rotationX = trY;						tweenParams.rotationY = trX;						tweenParams.scale = tS;						tweenParams.x = tY;						tweenParams.y = tX;						tweenParams.z = tZ;						tweenParams.alpha = tA;					} else {						tweenParams.rotationX = trX;						tweenParams.rotationY = trY;						tweenParams.scale = tS;						tweenParams.x = tX;						tweenParams.y = tY;						tweenParams.z = tZ;						tweenParams.alpha = tA;					}					tweenParams.delay = ( rec._id == nextID ) ? 0 : calcDelay					tweenParams.ease = easeFnc;					tweenParams.onComplete = ( rec._id == nextID ) ? AnimationComplete : null					TweenMax.to(p, tweenTime, tweenParams);				}			}			initFlag = true;		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function applyColourTransform(pl : PlaneX, ct : ColorTransform) : void {			if ( MovieUtils.functionExists(pl.material, "movie") ) {				var mmat : MovieMaterial = pl.material as MovieMaterial;				var mca : CoreAsset = mmat.movie as CoreAsset;				if ( mca.bitmap != null ) {					mca.bitmap.bitmapData.colorTransform(mca.bitmap.bitmapData.rect, ct);					mmat.drawBitmap();				}			} else {				if ( pl.material.bitmap != null )					pl.material.bitmap.colorTransform(pl.material.bitmap.rect, ct);			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function setPrecise(p : PlaneX, b : Boolean) : void {			var bm : BitmapMaterial = ( p.material as BitmapMaterial );			bm.precise = b;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get isDeselected() : Boolean {			return false		};		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setRenderData(a : Array) : void {			data = a;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setGallerySettings(settings : GallerySettings) : void {			_settings = settings;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function setRenderSettings(s : *) : void {			_renderSettings = s;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function getRenderSettings() : * {			return _renderSettings		}		override public function get sID() : Number {			return selectedID;		}		override public function set sID(s : Number) : void {			// trace( s + ' : ' + selectedID )			selectedID = s;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OutPlane(e : InteractiveScene3DEvent) : void {			var ctDark : ColorTransform = new ColorTransform();			// new ColorTransform( 1, 1, 1, 1, 25, 25, 25, 0);			ctDark.redMultiplier = _renderSettings.rollOverDarkMultiplier			ctDark.blueMultiplier = _renderSettings.rollOverDarkMultiplier			ctDark.greenMultiplier = _renderSettings.rollOverDarkMultiplier			var p : PlaneX = e.displayObject3D as PlaneX			if ( !p.extra.isDark && _renderSettings.rollOverLightEffect ) {				applyColourTransform(p, ctDark)				p.extra.isDark = true;			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OverPlane(e : InteractiveScene3DEvent) : void {			var ctLight : ColorTransform = new ColorTransform();			// new ColorTransform( 1, 1, 1, 1, 25, 25, 25, 0);			ctLight.redMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.blueMultiplier = _renderSettings.rollOverLightMultiplier			ctLight.greenMultiplier = _renderSettings.rollOverLightMultiplier			var p : PlaneX = e.displayObject3D as PlaneX			if ( p.extra.isDark && _renderSettings.rollOverLightEffect ) {				applyColourTransform(p, ctLight)				p.extra.isDark = false;			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function AnimationComplete(e : Event = null) : void {			super.AnimationComplete(e);			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SCROLL_COMPLETE, true);			if ( selectedRecord != null)				ge.selectedID = selectedRecord._id;			if ( data != null )				ge.totalItems = data.length - 1;			dispatchEvent(ge);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function MouseDownEvent(e : MouseEvent) : void {		}		override public function MouseUpEvent(e : MouseEvent) : void {		}		override public function MouseMoveEvent(e : MouseEvent) : void {		}		override public function DragEvent(xPos : Number, yPos : Number) : void {		}	}}