/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.utils.DelayCall * Version 	  	: 2 * Description 	: Call a function after a delay *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti * Date 			: 12/01/09 - Created DelayCall Class * 				: 06/04/09 - added static method for adding DelayCall function calls. *  ******************************************************************************************************************************************************************************** *  * STATIC METHODS *  * 	DelayCall.addCall( functionName:String, scope:Object, ...arguments  ) : void * 	getInstance() : DelayCall *  * METHODS *  * 	call( functionName:String, scope:Object, ...arguments ):void * 	clear( ) * 	 * PROPERTIES *  * 	delayIntervalTime : Number - time in milliseconds; *  **********************************************************************************************************************************************************************************/package com.kurst.utils {	import flash.events.TimerEvent;	import flash.utils.Timer;	public class FDelayCall {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// Static Variables		private static var _inst : FDelayCall;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -STATIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// SSSSS TTTTTT   AAA   TTTTTT IIIIII  CCCCC		// SS       TT    AAAAA    TT     II   CC   CC		// SSSS    TT   AA   AA   TT     II   CC		// SS   TT   AAAAAAA   TT     II   CC   CC		// SSSSS    TT   AA   AA   TT   IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method addCall( functionName:String, scope:Object, ...arguments  ) 		 * @tooltip static method - to quickly / easily add delay calls to functions		 * @param functionName:String (must be public), 		 * @param scope:Object, 		 * @param ...arguments		 */		public static function addCall(fnc : Function, scope : Object, ...arguments) : void {			var params : Array = new Array();			params.push(fnc)			params.push(scope)			for ( var c : uint = 0 ; c < arguments.length ; c++ )				params.push(arguments[c]);			getInstance().call.apply(getInstance(), params)		}		/**		 * @method getInstance() 		 * @tooltip get static instance of DelayCall		 * @return DelayCall Object		 */		public static function getInstance() : FDelayCall {			if ( _inst == null ) _inst = new FDelayCall();			return _inst;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// Class Variables		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _delayIntervalTime : Number = 50;		// Delay interval time		private var delayedFunctionArray : Array;		// Delay function array		private var DelayTimer : Timer;		// Delay Timer		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// Constructor		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function FDelayCall() {			delayedFunctionArray = new Array();			DelayTimer = new Timer(_delayIntervalTime);			DelayTimer.addEventListener(TimerEvent.TIMER, delayInterval, false, 0, true)		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method doLater		 * @tooltip 		 * @param functionName:String (must be public), 		 * @param scope:Object, 		 * @param ...arguments		 * @return void		 */		public function call(_fnc : Function, scope : Object, ...arguments) : void {			DelayTimer.stop();			var o : Object = new Object()			o.fnc = _fnc;			o.scope = scope;			o.args = arguments			delayedFunctionArray.push(o)			DelayTimer.start();		}		/**		 * @method doLater		 * @tooltip clear all pending delay calls		 * @param functionName:String		 */		public function clear() : void {			DelayTimer.stop();			delayedFunctionArray = new Array();		}		/**		 * @method delayInterval		 * @tooltip delay interval which calls the specified functions		 * @param functionName:String (must be public), 		 * @param scope:Object, 		 * @param ...arguments		 */		private function delayInterval(e : TimerEvent = null) : void {			DelayTimer.stop();			var c : Number = delayedFunctionArray.length			var a : Array = delayedFunctionArray.reverse()			while ( c-- ) {				// var fnc:Function = a[c].scope[a[c].fnc]				var fnc : Function = a[c].fnc				if ( a[c].args.length == 0 ) {					fnc.apply(a[c].scope);				} else {					fnc.apply(a[c].scope, a[c].args);				}			}			delayedFunctionArray = [];		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method delayIntervalTime		 * @tooltip get / set delay interval time 		 * @param Number in Milliseconds		 * @return Number in Milliseconds		 */		public function get delayIntervalTime() : Number {			return _delayIntervalTime;		}		public function set delayIntervalTime(delayIntervalTime : Number) : void {			DelayTimer.delay = delayIntervalTime;			_delayIntervalTime = delayIntervalTime;		}	}}