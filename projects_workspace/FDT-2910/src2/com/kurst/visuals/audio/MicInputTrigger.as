/********************************************************************************************************************************************************************************
 * 
 * Class Name  	: 
 * Version 	  	: 
 * Description 	: 
 * 
 ********************************************************************************************************************************************************************************
 * 
 * Author 		: Karim Beyrouti
 * Date 			: 
 * 
 ********************************************************************************************************************************************************************************
 * 
 * METHODS
 * 
 *
 * PROPERTIES
 * 
 *
 * EVENTS
 * 
 * 
 ********************************************************************************************************************************************************************************
 * 				:
 *
 *
 *********************************************************************************************************************************************************************************
 * NOTES			:
 **********************************************************************************************************************************************************************************/
package com.kurst.visuals.audio {
	import flash.events.SampleDataEvent;

	public class MicInputTrigger {
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		private static var instance : MicInputTrigger

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		public static function addTriggerFunction(func : Function, scope : Object) : void {
			getInstance()._addTriggerFunction(func, scope);
		}

		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		public static function getInstance() : MicInputTrigger {
			if ( instance == null )
				instance = new MicInputTrigger();

			return instance;
		}

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		private var delayedFunctionArray : Array;

		// Delay function array
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		function MicInputTrigger() {
			delayedFunctionArray = new Array();
		}

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		public function _addTriggerFunction(func : Function, scope : Object) : void {
			var o : Object = new Object()
			o.fnc = func;
			o.scope = scope;

			delayedFunctionArray.push(o)

			registerMic();
		}

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		private function registerMic(silenceLevel : int = 10) : void {
			unRegisterMic();
			MicrophoneUtils.getMicrophone(-1, silenceLevel).addEventListener(SampleDataEvent.SAMPLE_DATA, micSampleData, false, 0, true);
		}

		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		private function unRegisterMic() : void {
			MicrophoneUtils.getMicrophone().removeEventListener(SampleDataEvent.SAMPLE_DATA, micSampleData);
		}

		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------
		// ------------------------------------------------------------------------------------------------------------------------------------------------------------
		/**
		 *  
		 * 
		 * @param
		 * @return
		 */
		private function micSampleData(event : SampleDataEvent) : void {
			var c : Number = delayedFunctionArray.length
			var a : Array = delayedFunctionArray.reverse()

			while ( c-- ) {
				// var fnc:Function = a[c].scope[a[c].fnc]
				var fnc : Function = a[c].fnc
				fnc.apply(a[c].scope, a[c].args);
			}

			delayedFunctionArray = [];
			unRegisterMic();
		}
	}
}