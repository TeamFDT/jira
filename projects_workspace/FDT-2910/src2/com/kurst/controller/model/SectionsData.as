/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controller.model.SectionsData * Version 	  	: 2 * Description 	: Load Site Structure *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti  * Date 			: 05/02/08 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 	SectionsData.getDataLoaded() : Boolean * 	SectionsData.getInstance() : SectionsData * 	SectionsData.loadSiteStructure( URI:String ) : SectionsData * 	SectionsData.findRecordByKey( id:*, key:String ) : Object * 	SectionsData.isDataLoaded():Boolean *  * PROPERTIES *  * * EVENTS *  * 	LoadEvent.LOADED_DATA *  ******************************************************************************************************************************************************************************** *********************************************************************************************************************************************************************************	XML Format:		<section_data>					<section>				<id 			type="number">1</id>				<name			type="string">DOWNLOADS</name>				<swf 			type="string">downloads.swf</swf>				<address		type="string">downloads</address>				...			</section>			...			</section_data>	 **********************************************************************************************************************************************************************************/package com.kurst.controller.model {	import mx.collections.ArrayCollection;	import com.kurst.data.XmlToCollection;	import com.kurst.events.LoadEvent;	import com.kurst.events.eventDispatcher;	public class SectionsData extends eventDispatcher {		private static var _inst : SectionsData;		// -STATIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// SSSSS TTTTTT   AAA   TTTTTT IIIIII  CCCCC		// SS       TT    AAAAA    TT     II   CC   CC		// SSSS    TT   AA   AA   TT     II   CC		// SS   TT   AAAAAAA   TT     II   CC   CC		// SSSSS    TT   AA   AA   TT   IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method setData		 * @tooltip set the sections data ( if it is being loaded it somewhere else )		 * @param DataProvder		 * @return SectionsData		 */		public static function setData(data : ArrayCollection) : SectionsData {			var inst : SectionsData = getInstance();			inst.sectionsData = data;			return inst		}		/**		 * @method isDataLoaded / getDataLoaded():Boolean		 * @tooltip return true if data has been loaded		 * @return Boolean		 */		public static function getDataLoaded() : Boolean {			return getInstance().loaded;		}		public static function isDataLoaded() : Boolean {			return getDataLoaded();		}		/**		 * @method getInstance()		 * @tooltip get sections data instance		 */		public static function getInstance() : SectionsData {			if ( _inst == null ) {				_inst = new SectionsData();			}			return _inst		}		/**		 * @method loadSiteStructure( URI:String ) : SectionsData		 * @tooltip load the site structure		 * @param URI of XML file containing site structure		 * @return Sections Data		 */		public static function loadSiteStructure(URI : String) : SectionsData {			var inst : SectionsData = getInstance();			inst.loadData(URI);			return inst		}		/**		 * @method findRecordByKey( id:*, key:String ):Object		 * @tooltip find a section record - returns -1 if no match is found 		 * @param id : *	- Matching value		 * @param  key : String - Key of record to match		 * @return Object - found record		 */		public static function findRecordByKey(id : *, key : String) : Object {			if ( !getInstance().loaded ) return -1;			var data : ArrayCollection = getInstance().getDAO();			for ( var c : uint = 0 ; c < data.length ; c++ ) {				var rec : Object = data.getItemAt(c);				if ( rec[key] == id )					return rec;			}			return -1		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				private var xmlToDao : XmlToCollection;		private var dao : ArrayCollection;		private var _loaded : Boolean = false;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				public function SectionsData() {			xmlToDao = new XmlToCollection();		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method loadSiteStructure( URI:String ) : SectionsData		 * @tooltip load the site structure		 * @param URI of XML file containing site structure		 * @return Sections Data		 */		public function loadData(uri : String) : void {			xmlToDao.addEventListener(LoadEvent.LOADED_DATA, DataLoadedEvent, false, 0, true);			_loaded = false;			xmlToDao.load(uri);		}		/**		 * @method getDAO() : ArrayCollection		 * @tooltip get stire structure data provider		 * @return ArrayCollection		 */		public function getDAO() : ArrayCollection {			return dao;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method DataLoadedEvent( e : LoadEvent ) : void 		 * @tooltip Data loaded event handler		 */		private function DataLoadedEvent(e : LoadEvent) : void {			xmlToDao.removeEventListener(LoadEvent.LOADED_DATA, DataLoadedEvent);			_loaded = true;			dao = xmlToDao.data;			dispatchEvent(new LoadEvent(LoadEvent.LOADED_DATA));		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method loaded		 * @tooltip return true if data has been loaded - false is data has not been loaded		 * @return Boolean		 */		public function get loaded() : Boolean {			return _loaded;		}		public function set loaded(loaded : Boolean) : void {			_loaded = loaded;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get sectionsData() : ArrayCollection {			return dao;		}		public function set sectionsData(data : ArrayCollection) : void {			loaded = true;			dao = data;		}	}}