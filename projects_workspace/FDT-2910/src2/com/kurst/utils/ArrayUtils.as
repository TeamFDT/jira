package com.kurst.utils {	import mx.collections.ArrayCollection;	import flash.utils.ByteArray;	/**	 * @author karimbeyrouti	 */	public class ArrayUtils {		/**		 * Shuffles Vector with Fisher-Yates shuffling 		 * using com.gskinner.utils.Rndm class		 * @param vec		 * example: VectorUtils.shuffleVector(myVector as Vector.<*>);		 */		public static function shuffleVector(vectr : Vector.<*>) : Vector.<*> {			if (vectr.length > 1) {				var i : int = vectr.length - 1;				while (i > 0) {					var s : Number = NumberUtils.randRange(0, vectr.length, true)					// Rndm.integer(0, vec.length);					var temp : * = vectr[s];					vectr[s] = vectr[i];					vectr[i] = temp;					i--;				}			}			return vectr;		}		/**		 * Locate and return the (lowest) nearest neighbor or matching value in a <code>NUMERIC</code> sorted array of Numbers.		 * @param val 				the value to find match or find nearst match of.		 * @param range 			of values in array.		 * @param returnIndex 		if <code>true</code> return the array index of the neighbor, if <code>false</code> return the value of the neighbor.		 * @example <listing version="3.0">		 * var a : Array = [1, 3, 5, 7, 9, 11];		 * var nearestLow : Number = ArrayUtil.nearestNeighbor(4, a); 			// returns 3 (value)		 * var nearestHigh : Number = ArrayUtil.nearestNeighbor(4, a, true); 	// returns 1 (index) 		 * </listing>		 */		public static function nearestNeighbor(val : Number, range : Array, returnIndex : Boolean = false) : Number {			var nearest : Number = range[0];			var index : uint = 0;			for (var i : int = 1;i < range.length; i++) {				if (Math.abs(range[i] - val) < Math.abs(nearest - val)) {					nearest = range[i];					index = i;				}			}			return (!returnIndex) ? nearest : index;		}		/**		 * Shuffles an array.		 * @param	array	The array to shuffle.		 */		public static function Shuffle(array : Array) : void {			var len : Number = array.length;			var rand : Number;			var temp : *;			for ( var i : int = 0 ; i < len ; i++ ) {				rand = Math.floor(Math.random() * len);				temp = array[i];				array[i] = array[rand];				array[rand] = temp;			}		}		/**		 * Shuffles an array.		 * @param	array	The array to shuffle.		 */		public static function ShuffleCollection(array : ArrayCollection) : void {			var len : Number = array.length;			var rand : Number;			var temp : *;			for ( var i : int = 0 ; i < len ; i++ ) {				rand = Math.floor(Math.random() * len);				temp = array.getItemAt(i);				// array[i];				array.setItemAt(array.getItemAt(rand), i);				// array[i] = array[rand];				array.setItemAt(temp, rand)				// array[rand] = temp;			}		}		/**		 * Create a new array that only contains unique instances of objects in the specified array.		 * this can be used to remove duplication object instances from an array.		 */		public static function uniqueCopy(a : Array) : Array {			var newArray : Array = new Array();			var len : int = a.length;			var item : Object;			for (var i : int = 0;i < len; ++i) {				item = a[i];				if (contains(newArray, item)) {					continue;				}				newArray.push(item);			}			return newArray;		}		/**		 * 	Determines if a value exists within the array.		 */		public static function contains(a : Array, val : Object) : Boolean {			return (a.indexOf(val) != -1);		}		/**		 * Return the array index of the minimum value in a numeric array.		 */		public static function min(a : Array) : int {			var i : int = a.length;			var min : Number = a[0];			var idx : int = 0;			while (i-- > 1) {				if (a[i] < min) min = a[idx = i];			}			return idx;		}		/**		 * Return the array index of the maximum value in a numeric array.		 */		public static function max(a : Array) : int {			var i : int = a.length;			var max : Number = a[0];			var idx : int = 0;			while (i-- > 1) {				if (a[i] > max) max = a[idx = i];			}			return idx;		}		/**		 * Return the minimum value in a numeric array.		 * @return Number 	minimum value (0 is returned with 0 length arrays)		 */		public static function minVal(a : Array) : Number {			return a[ArrayUtils.min(a)]			// ((a.length <= 0) ? 0 : a[ArrayUtils.max(a)]);		}		/**		 * Return the maximum value in a numeric array.		 * @return Number 	maximum value		 */		public static function maxVal(a : Array) : Number {			return a[ArrayUtils.max(a)]			// ((a[ArrayUtils.max(a)] < 0) ? 0 : a[ArrayUtils.max(a)]);		}		/**		 * Return 		 * @return		 */		public static function clone(source : Object) : Array {			var myBA : ByteArray = new ByteArray();			myBA.writeObject(source);			myBA.position = 0;			return(myBA.readObject() as Array);		}	}}