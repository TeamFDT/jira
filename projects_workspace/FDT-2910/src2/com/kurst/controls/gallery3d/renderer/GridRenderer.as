/******************************************************************************************************************************************************************************** *  * Class Name  	: karimbeyrouti * Version 	  	: com.kurst.controls.gallery3d.renderer.GridRenderer * Description 	: Grid Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		destroy() * 		setRenderData( a : Array ) : void * 		setGallerySettings( settings : GallerySettings ) : void * 		setRenderSettings( s : * ) : void * 		getRenderSettings( ) : * * 		render( selectedID : Number,  invalidate : Boolean = false ) : void * * EVENTS *  * 		Gallery3dEvent.SCROLL_COMPLETE *  ******************************************************************************************************************************************************************************** * TODO: Keep plane animating whistle the content is loading  * TODO: Add vars to destroy ... **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.renderer {	import org.papervision3d.objects.DisplayObject3D;	import com.greensock.*	import com.kurst.controls.gallery3d.renderer.GalleryRenderer;	import com.kurst.controls.gallery3d.renderer.IGalleryRenderer;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.controls.gallery3d.settings.GridSettings;	import com.kurst.events.Gallery3dEvent;	import com.kurst.utils.NumberUtils;	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.materials.special.ParticleMaterial;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.objects.special.ParticleField;	import com.kurst.pv3d.objects.PlaneX	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import com.kurst.controls.gallery3d.data.DateGridImageCollection;	import org.papervision3d.materials.MovieMaterial	import com.kurst.controls.gallery3d.assets.CoreAsset	public class GridRenderer extends GalleryRenderer implements IGalleryRenderer {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _settings : GallerySettings;		private var _renderSettings : GridSettings		private var prevRollOverPlane : PlaneX;		private var data : Array;		private var prevSelectedID : Number;		private var selectedID : Number;		private var prevrZ : Number = -1;		private var initFlag : Boolean = false;		private var page : Number = 0;		private var prevPage : Number = 0;		private var animationCompleteFlag : Boolean = true		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function GridRenderer(settings : GridSettings) {			_renderSettings = settings		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		override public function initNewItem(rec : Object) : void {			var p : PlaneX = rec.plane as PlaneX;			p.alpha = _renderSettings.gridInitAlpha			p.x = _renderSettings.gridInitX			p.y = _renderSettings.gridInitY			p.z = _renderSettings.gridInitZ			p.scale = _renderSettings.gridInitScale		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function destroy() : void {			super.destroy()			// TweenMax.killAllDelayedCalls();			if ( data != null ) {				for ( var j : int = 0 ; j < data.length ; j++ ) {					var r : Object = data[j];					var pl : PlaneX = r.plane;					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);				}			}			_renderSettings = null			_settings = null;			prevRollOverPlane = null			prevSelectedID = undefined			prevrZ = undefined			page = undefined;			prevPage = undefined			data = null;			selectedID = undefined;			selectedRecord = null;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function render(sID : Number, invalidate : Boolean = false) : void {			// trace('gridRenderer.render')			selectedID = ( invalidate == true && selectedID == -1) ? -1 : sID			sID = selectedID;			selectedRecord = ( selectedID == -1 ) ? {_id:-1, plane:selectedRecord.plane} : data[ selectedID ];			// Record of new plane			// ------------------------------------------------------------------------------			var tweenTime : Number = _renderSettings.animationTime;			// Tween Duration			var easeFnc : Function = _renderSettings.animationEasingFunction			// Tween Easing			var col : int = _renderSettings.gridCols;			var row : int = _renderSettings.gridRows;			var totalItemsInView : int = _renderSettings.gridCols * _renderSettings.gridRows;			var dLength : int = data.length;			page = ( sID < 0 ) ? page : Math.floor(sID / totalItemsInView);			var itemCounter : int = 0;			var rZ : Number, 			tx : Number, 			ty : Number, 			tz : Number, 			ts : Number, 			ta : Number			var calcDelay : Number = 0;			var posCounter : Number = 0;			var minID : Number = page * totalItemsInView ;			var maxID : Number = ( page == 0 ) ? totalItemsInView : minID + totalItemsInView;			var redraw : Boolean			var isVisible : Boolean			var itemInThisPage : Number = ( dLength < totalItemsInView ) ? dLength : totalItemsInView;			var currentNumberOfRows : Number = Math.ceil(itemInThisPage / _renderSettings.gridRows) + 1;			var currentNumberOfCols : Number = ( itemInThisPage < _renderSettings.gridCols ) ? itemInThisPage : _renderSettings.gridCols;			var gridHeight : Number = currentNumberOfRows * _renderSettings.gridYSpacing;			var gridWidth : Number = currentNumberOfCols * _renderSettings.gridXSpacing;			// ------------------------------------------------------------------------------			// Loop Variables			var i : int = 0;			var rec : Object			// Loop - Record			var p : PlaneX			// Loop - Plane			// ------------------------------------------------------------------------------			// reposition all plane / items on display			for ( i ; i < dLength ; i++ ) {				rec = data[i];				p = rec.plane;				isVisible = ( rec._id >= minID && rec._id < maxID );				// Hide planes not in grid				if ( !initFlag && !invalidate && isVisible )					calcDelay += _renderSettings.animationInitialDrawTime;				if ( posCounter % _renderSettings.gridCols == 0 && isVisible ) {					row--;					col = 0;				}				p.visible = isVisible;				rZ = ( _renderSettings.gridRandomZPosition > 0 || prevrZ != _renderSettings.gridRandomZPosition ) ? NumberUtils.randRange(0, _renderSettings.gridRandomZPosition, true) : 0;				// ------------------------------------------------------------------------------				if ( p.extra == null ) p.extra = new Object();				if ( p.extra.rZ == null || prevrZ != _renderSettings.gridRandomZPosition ) p.extra.rZ = rZ;				if ( p.extra.isOver == null ) p.extra.isOver = false;				// ------------------------------------------------------------------------------				// Only move the visible planes				if ( isVisible ) {					// ------------------------------------------------------------------------------					// Selected Plane					if ( selectedID == rec._id ) {						p.extra.isOver = false;						// Calculate positions						tx = 0 + _renderSettings.gridSelectedXOffset;						ty = 0 + _renderSettings.gridSelectedYOffset;						tz = _renderSettings.gridSelectedZ;						ts = _renderSettings.gridSelectedScale						ta = _renderSettings.alphaSelected;						redraw = p.x != tx || p.y != ty || p.z != tz || p.scale != ts || p.rotationX != 0 || p.rotationY;						// Refresh event listeners						p.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);						p.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane, false, 0, true);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						// Position Item to the right of the screen  - animation FX						if (	 prevSelectedID != selectedID && redraw && animationCompleteFlag && prevSelectedID > -1 && _renderSettings.animationFromSideEnabled && prevPage == page ) {							p.x = tx - _renderSettings.animationFromSideXOffset;							p.y = ty;							p.z = tz;							p.scale = ts;							p.rotationX = 0;							p.rotationY = 0;							p.alpha = ta;						}						animationCompleteFlag = false;						// Animate selected item						if ( redraw && prevSelectedID != selectedID ) {							TweenMax.killTweensOf(p);							TweenMax.to(p, tweenTime, {x:tx, y:ty, z:tz, scale:ts, rotationY:0, rotationX:0, alpha:ta, ease:easeFnc, delay:( initFlag ) ? _renderSettings.animationSelectedTime : 0, onComplete:AnimationComplete});						}						// ------------------------------------------------------------------------------							// All Other Planes					} else {						p.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						// Calculate positions						tx = ( _renderSettings.gridCenterXOnScreen ) ? ( col * _renderSettings.gridXSpacing ) : ( col * _renderSettings.gridXSpacing ) + _renderSettings.gridXOffset;						tx += ( _renderSettings.gridCenterXOnScreen ) ? ( gridWidth / 2 ) * -1 : 0 ;						ty = ( _renderSettings.gridCenterYOnScreen ) ? ( row * _renderSettings.gridYSpacing ) : ( row * _renderSettings.gridYSpacing ) + _renderSettings.gridYOffset;						ty += ( _renderSettings.gridCenterYOnScreen ) ? -1 * ( ( _renderSettings.gridRows - currentNumberOfRows ) * _renderSettings.gridYSpacing ) - ( gridHeight / 2 ) : 0;						tz = ( p.extra.isOver == true ) ? _renderSettings.rollOverZ : 0 + p.extra.rZ;						ts = _renderSettings.gridScale						ta = ( selectedID >= 0 ) ? _renderSettings.alphaUnSelected : _renderSettings.alpha;						redraw = ( p.alpha != ta || p.x != tx || p.y != ty || p.z != ( tz + + p.extra.rZ ) || p.scale != ts || p.rotationX != 0 || p.rotationY );						// Animate selected item						if ( redraw && !p.extra.isOver) {							if ( !TweenMax.isTweening(p) || prevSelectedID != selectedID  ) {								TweenMax.killTweensOf(p);								TweenMax.to(p, tweenTime, {x:tx, y:ty, z:tz, scale:ts, rotationX:0, rotationY:0, alpha:ta, delay:calcDelay, ease:easeFnc});							}						}					}				} else {					// HIDE ITEMS / PLANES NOT ON DISPLAY					p.x = 0					p.y = 0					p.z = _renderSettings.cameraZOffset * -1 * 2					p.scale = _renderSettings.gridScale;					p.rotationX = 0;					p.rotationY = 0;				}				// ------------------------------------------------------------------------------				// Increment Counters				if ( isVisible ) {					col++;					posCounter++;				}			}			initFlag = true;			prevrZ = _renderSettings.gridRandomZPosition;			sID = prevSelectedID = selectedID;			prevPage = page;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function renderCamera(_camera : CameraObject3D, s : Stage = null) : void {			if ( _renderSettings != null  ) {				if ( _renderSettings.animationCameraEnabled ) {					var tZ : Number					var tY : Number					var tX : Number					if ( s != null && selectedID == -1 ) {						_camera.x += ( ( -1 * ( ( s.stageWidth / 2  ) - s.mouseX ) * _renderSettings.animationMouseMultiplier ) - _camera.x ) * _renderSettings.animationCameraSpeed;						_camera.y += ( ( 1 * ( ( s.stageHeight / 2 ) - s.mouseY ) * _renderSettings.animationMouseMultiplier ) - _camera.y ) * _renderSettings.animationCameraSpeed;						tZ = _camera.z + ( ( _renderSettings.cameraZOffset - _camera.z ) * _renderSettings.animationCameraSpeed );						_camera.z = tZ					} else if ( selectedID != -1 ) {						_camera.x += (  0 - _camera.x ) * _renderSettings.animationCameraSpeed;						_camera.y += (  0 - _camera.y ) * _renderSettings.animationCameraSpeed;						tZ = _camera.z + ( ( _renderSettings.cameraZOffset - _camera.z ) * _renderSettings.animationCameraSpeed );						if ( tZ == 0 ) tZ = .2;						_camera.z = tZ					}				}			}		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get isDeselected() : Boolean {			return (selectedID < 0 );		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setRenderData(a : Array) : void {			data = a;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setGallerySettings(settings : GallerySettings) : void {			_settings = settings;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function setRenderSettings(s : *) : void {			_renderSettings = s;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function getRenderSettings() : * {			return _renderSettings		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OutPlane(e : InteractiveScene3DEvent = null) : void {			e.displayObject3D.alpha = ( selectedID > 0 ) ? _renderSettings.alphaUnSelected : _renderSettings.alpha;			if ( selectedID == -1 && e.displayObject3D.extra.isOver ) {				e.displayObject3D.extra.isOver = false;				/*				e.displayObject3D.z 			= 0 + e.displayObject3D.extra.rZ				e.displayObject3D.scale			= _renderSettings.gridScale;				 */				TweenMax.to(e.displayObject3D, _renderSettings.animationRollOverTime, {z:0 + e.displayObject3D.extra.rZ, scale:_renderSettings.gridScale, ease:_renderSettings.animationEasingFunction});			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OverPlane(e : InteractiveScene3DEvent = null) : void {			e.displayObject3D.alpha = _renderSettings.alphaRollOver;			if ( selectedID == -1 ) {				if ( prevRollOverPlane != null ) {					var sI : InteractiveScene3DEvent = new InteractiveScene3DEvent(InteractiveScene3DEvent.OBJECT_OUT)					sI.displayObject3D = prevRollOverPlane as DisplayObject3D;					OutPlane(sI);				}				TweenMax.to(e.displayObject3D, _renderSettings.animationRollOverTime, {z:_renderSettings.rollOverZ, scale:_renderSettings.rollOverScale, ease:_renderSettings.animationEasingFunction});				/*																		e.displayObject3D.z 			= _renderSettings.rollOverZ				e.displayObject3D.scale			= _renderSettings.rollOverScale;				 * 				 */				e.displayObject3D.extra.isOver = true;				prevRollOverPlane = e.displayObject3D as PlaneX			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function SelectPlane(e : InteractiveScene3DEvent) : void {			var ca : CoreAsset			e.displayObject3D.extra.isOver = false;			if ( selectedID != -1 ) {				render(-1);				e.displayObject3D.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane, false, 0, true);				ca = ( e.displayObject3D.material as MovieMaterial ).movie as CoreAsset;				ca.unSelect();			} else if ( selectedID < 0 ) {				render(Number(e.currentTarget.name));				ca = ( e.displayObject3D.material as MovieMaterial ).movie as CoreAsset;				ca.select();				ca.MouseDown();			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function AnimationComplete(e : Event = null) : void {			super.AnimationComplete();			animationCompleteFlag = true;			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SCROLL_COMPLETE, true);			if ( selectedRecord != null )				ge.selectedID = selectedRecord._id;			if ( data != null )				ge.totalItems = data.length - 1;			dispatchEvent(ge);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function MouseDownEvent(e : MouseEvent) : void {		}		override public function MouseUpEvent(e : MouseEvent) : void {		}		override public function MouseMoveEvent(e : MouseEvent) : void {		}		override public function DragEvent(xPos : Number, yPos : Number) : void {		}	}}