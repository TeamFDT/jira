/******************************************************************************************************************************************************************************** *  * Class Name  	: karimbeyrouti * Version 	  	: com.kurst.controls.gallery3d.renderer.GridRenderer * Description 	: Grid Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		destroy() * 		setRenderData( a : Array ) : void * 		setGallerySettings( settings : GallerySettings ) : void * 		setRenderSettings( s : * ) : void * 		getRenderSettings( ) : * * 		render( selectedID : Number,  invalidate : Boolean = false ) : void * * EVENTS *  * 		Gallery3dEvent.SCROLL_COMPLETE *  ******************************************************************************************************************************************************************************** * **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.renderer {	// import com.geditor.assets.GalleryMaterialVideoAsset;
	import com.kurst.controls.gallery3d.assets.GalleryMaterialAsset;	import com.kurst.events.RandomRendererEvents;	import com.lextalkington.util.CircumferencePointGenerator;	import com.kurst.controls.gallery3d.data.RandomGroupData;	import com.greensock.easing.Cubic;	import com.kurst.utils.NumberUtils;	import com.kurst.controls.gallery3d.settings.RandomSettings;
	// import gs.*;	import com.greensock.*	import com.kurst.controls.gallery3d.data.DateGridImageCollection;	// import com.gskinner.motion.GTween;	import com.kurst.controls.gallery3d.renderer.GalleryRenderer;	import com.kurst.controls.gallery3d.renderer.IGalleryRenderer;	import com.kurst.controls.gallery3d.settings.CarouselSettings;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.events.Gallery3dEvent;	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;	import com.kurst.pv3d.objects.PlaneX	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import org.papervision3d.materials.MovieMaterial	import com.kurst.controls.gallery3d.assets.CoreAsset	import com.kurst.controls.gallery3d.assets.DynamicMaterialAsset	import org.papervision3d.core.math.Quaternion;	import com.gskinner.utils.Rndm;	public class RandomRenderer extends GalleryRenderer implements IGalleryRenderer {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var startQuaternion : Quaternion = null;		private var endQuaternion : Quaternion = null;		private var currentQuaternion : Quaternion = null;		private var _settings : GallerySettings;		private var _renderSettings : RandomSettings		private var _isVisible : Boolean = true;		private var data : Array;		private var selectedID : Number;		private var prevrZ : Number = -1;		private var initFlag : Boolean = false;		private var selectedPlane : PlaneX;		private var targetDO : DisplayObject3D;		private var initCameraFlag : Boolean = false;		private var prevSelectedID : Number = -1;		public var _angle : Number = 0;		private var _cam : CameraObject3D;		private var dist : Number = -1100		private var animationCompleteFlag : Boolean = true		private var targetPosition : DisplayObject3D;		private var groupData : Object;		private var groupFlag : Boolean = false;		private var previousRecord : Object;		private var hideDO3D : DisplayObject3D;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function RandomRenderer(settings : RandomSettings) {			_renderSettings = settings			targetDO = new DisplayObject3D();			targetPosition = new DisplayObject3D();			groupData = new Object();			Rndm.seed = 7262;			// 7262;			hideDO3D = new DisplayObject3D()			hideDO3D.x = settings.radius / 2;			hideDO3D.y = settings.radius / 2;			hideDO3D.z = settings.radius / 2;		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function initNewItem(rec : Object) : void {			if ( rec.group != null ) {				var groupDataObject : RandomGroupData;				var plane : PlaneX = rec.plane as PlaneX				groupFlag = true;				if ( groupData[rec.group] == null ) {					groupDataObject = new RandomGroupData();					groupDataObject.do3d = new DisplayObject3D();					groupDataObject.do3d.x = Rndm.float(_renderSettings.radius * -1, _renderSettings.radius)					// NumberUtils.randomRange(_renderSettings.radius * -1 , _renderSettings.radius )					groupDataObject.do3d.y = Rndm.float(_renderSettings.radius * -1, _renderSettings.radius)					// NumberUtils.randomRange(_renderSettings.radius * -1 , _renderSettings.radius )					groupDataObject.do3d.z = Rndm.float(_renderSettings.radius * -1, _renderSettings.radius)					// NumberUtils.randomRange(_renderSettings.radius * -1 , _renderSettings.radius )					groupDataObject.do3d.rotationX = Math.random() * 180 - 90;					groupDataObject.do3d.rotationY = Math.random() * 180 - 90;					// groupDataObject.do3d.rotationZ 	= 0;					groupDataObject.groupName = rec.group;					groupDataObject.initFirst = false;					groupDataObject.counter = 0;					groupDataObject.generatePoint(0, 0, _renderSettings.groupSpacingRadius, rec.numberingroup)					groupData[rec.group] = groupDataObject;					trace('----------------------')				} else {					groupDataObject = groupData[rec.group] as RandomGroupData				}				initGroupedPlane(plane, groupDataObject);				groupDataObject.planes.push(rec.plane);				groupDataObject.initFirst = true;				groupDataObject.counter++			} else {				initPlane(plane);			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function destroy() : void {			super.destroy()			// TweenMax.killAllDelayedCalls();			if ( data != null ) {				for ( var j : int = 0 ; j < data.length ; j++ ) {					var r : Object = data[j];					if ( r != null ) {						var pl : PlaneX = r.plane;						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					}				}			}			_cam = null;			targetDO = null;			selectedPlane = null;			prevrZ = undefined;			_settings = null;			data = null;			selectedID = undefined;			selectedRecord = null;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function render(sID : Number, invalidate : Boolean = false) : void {			if ( sID < 0 ) return ;			if ( selectedRecord != null )				TweenMax.killDelayedCallsTo(selectedRecord.plane)			if ( selectedRecord != null )				selectedRecord.plane.material.smooth = false;			selectedID = ( invalidate == true && selectedID == -1) ? -1 : sID			if ( sID != -1 ) {				var record : Object = ( selectedID == -1 ) ? {_id:-2} : data[ selectedID ];				// Record of new plane				selectedRecord = record;			}			var i : int = 0			// Loop - Counter			var rec : Object			// Loop - Record			var p : PlaneX			// Loop - Plane			var l : int = data.length;			var tweenTime : Number = _renderSettings.animationCameraSpeed			var groupDataObject : RandomGroupData			var sameGroupTween : Boolean = false;			var tweenCam : Object = {};			var tweenTarget : Object = {};			var planeTarget : DisplayObject3D = new DisplayObject3D();			var planeTween : Object = {}			var selectedPlaneTarget : DisplayObject3D			if ( groupFlag && previousRecord != null )				sameGroupTween = ( selectedRecord.group == previousRecord.group );			for ( i ; i < l ; i++ ) {				rec = data[i];				p = rec.plane as PlaneX;				groupDataObject = groupData[rec.group] as RandomGroupData;				if ( groupFlag && previousRecord != null ) {					tweenTime = ( sameGroupTween ) ? _renderSettings.animationSameGroupCameraSpeed : tweenTime ;				}				if ( !_isVisible ) tweenTime = _renderSettings.animationHideTime				if ( ( p.extra != null && p.extra.randomRendererExpanded ) && ( selectedID != rec._id ) ) {					tweenTarget = new Object()					tweenTarget.x = p.extra.randomRendererOX					tweenTarget.y = p.extra.randomRendererOY					tweenTarget.z = p.extra.randomRendererOZ					TweenMax.to(p, _renderSettings.animationSelectTime, tweenTarget);					p.extra.randomRendererExpanded = false;				}				if ( selectedID == rec._id && prevSelectedID != selectedID) {					selectedPlane = p;					if ( groupDataObject != null )						planeTarget = expandPlane(selectedPlane, groupDataObject.do3d);					if ( ( groupDataObject != null ) ) {						targetPosition.copyTransform(planeTarget)						tweenTarget = new Object();						tweenTarget.x = targetPosition.x;						tweenTarget.y = targetPosition.y;						tweenTarget.z = targetPosition.z;						tweenTarget.rotationX = targetPosition.rotationX;						tweenTarget.rotationY = targetPosition.rotationY;						tweenTarget.rotationZ = targetPosition.rotationZ;						tweenTarget.ease = _renderSettings.animationEasingFunction						tweenTarget.onComplete = ( !isVisible ) ? ShowHideComplete : null;						TweenMax.to(targetDO, tweenTime, tweenTarget);						targetPosition.moveBackward(_renderSettings.distanceFromSelectedImage);						tweenCam = new Object();						tweenCam.x = targetPosition.x;						tweenCam.y = targetPosition.y;						tweenCam.z = targetPosition.z;						tweenCam.rotationX = targetPosition.rotationX;						tweenCam.rotationY = targetPosition.rotationY;						tweenCam.rotationZ = targetPosition.rotationZ;						tweenCam.onComplete = AnimationComplete;						tweenCam.ease = _renderSettings.animationEasingFunction						TweenMax.to(_cam, tweenTime, tweenCam);					}				}			}			previousRecord = selectedRecord;			prevSelectedID = sID;			initFlag = true;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function renderCamera(_camera : CameraObject3D, s : Stage = null) : void {			if ( !initCameraFlag ) {				_cam = _camera;				_cam.target = null;				initCameraFlag = true;			}			if ( selectedPlane != null )				_cam.lookAt(targetDO)		}		/**		 * @method 		 * @tooltip		 * @param  		 */		public function show() : void {			render(selectedID);			_isVisible = true;		}		public function hide() : void {			if ( selectedPlane != null ) {				var mm : MovieMaterial = selectedPlane.material as MovieMaterial;				var c : GalleryMaterialAsset = mm.movie as GalleryMaterialAsset;				c.unSelect();			}			var tweenTarget : Object = new Object();			var tweenCam : Object = new Object();			targetPosition = new DisplayObject3D();			targetPosition.copyTransform(hideDO3D)			tweenTarget = new Object();			tweenTarget.x = targetPosition.x;			tweenTarget.y = targetPosition.y;			tweenTarget.z = targetPosition.z;			tweenTarget.rotationX = targetPosition.rotationX;			tweenTarget.rotationY = targetPosition.rotationY;			tweenTarget.rotationZ = targetPosition.rotationZ;			tweenTarget.ease = _renderSettings.animationEasingFunction			TweenMax.to(targetDO, _renderSettings.animationHideTime, tweenTarget);			targetPosition.moveBackward(_renderSettings.distanceFromSelectedImage);			tweenCam = new Object();			tweenCam.x = targetPosition.x;			tweenCam.y = targetPosition.y;			tweenCam.z = targetPosition.z;			tweenCam.rotationX = targetPosition.rotationX;			tweenCam.rotationY = targetPosition.rotationY;			tweenCam.rotationZ = targetPosition.rotationZ;			tweenCam.onComplete = ShowHideComplete;			tweenCam.ease = _renderSettings.animationEasingFunction			TweenMax.to(_cam, _renderSettings.animationHideTime, tweenCam);			prevSelectedID = -1;			_isVisible = false;		}		private function ShowHideComplete() : void {			var e : RandomRendererEvents;			if ( _isVisible ) {				e = new RandomRendererEvents(RandomRendererEvents.HIDE_TOGGLE)				e.visible = true;			} else {				e = new RandomRendererEvents(RandomRendererEvents.HIDE_TOGGLE)				e.visible = false;			}			dispatchEvent(e);		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function initGroupedPlane(p : PlaneX, g : RandomGroupData) : void {			if ( p.extra == null ) p.extra = new Object();			if ( p.extra.randomRendererInit == true ) return;			p.extra.randomRendererInit = true;			p.copyTransform(g.do3d);			p.scale = _renderSettings.scale;			p.moveLeft(g.points[ g.counter ].x);			p.moveUp(g.points[ g.counter ].y);			p.moveForward(Rndm.integer(_renderSettings.groupItemSpacingMin, _renderSettings.groupItemSpacingMax));			p.extra.randomRendererOX = p.x			p.extra.randomRendererOY = p.y			p.extra.randomRendererOZ = p.z			p.extra.randomRendererExpanded = false;			if ( g.counter == 0 ) {				p.copyTransform(g.do3d);				p.scale = _renderSettings.scale;				p.moveBackward(5)				p.extra.randomRendererExpanded = false;			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function initPlane(p : PlaneX) : void {			if ( p.extra == null ) p.extra = new Object();			if ( p.extra.randomRendererInit == true ) return;			p.extra.randomRendererInit = true;			p.x = NumberUtils.randomRange(_renderSettings.radius * -1, _renderSettings.radius);			p.z = NumberUtils.randomRange(_renderSettings.radius * -1, _renderSettings.radius);			p.y = NumberUtils.randomRange(_renderSettings.radius * -1, _renderSettings.radius);			p.rotationX = Math.random() * 180 - 90			p.rotationY = Math.random() * 180 - 90			p.rotationZ = 0 ;			// Math.random() * 180			p.scale = _renderSettings.scale;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function expandPlane(plane : PlaneX, target : DisplayObject3D) : DisplayObject3D {			var planeTarget : DisplayObject3D = new DisplayObject3D();			planeTarget.copyTransform(target);			planeTarget.moveBackward(5);			var tweenTarget : Object = new Object();			tweenTarget.x = planeTarget.x			tweenTarget.y = planeTarget.y			tweenTarget.z = planeTarget.z			selectedPlane.extra.randomRendererExpanded = true;			TweenMax.to(plane, _renderSettings.animationSelectTime, tweenTarget);			return planeTarget;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function get isVisible() : Boolean {			return _isVisible;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get isDeselected() : Boolean {			return false		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setRenderData(a : Array) : void {			data = a;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setGallerySettings(settings : GallerySettings) : void {			_settings = settings;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function setRenderSettings(s : *) : void {			_renderSettings = s;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function getRenderSettings() : * {			return _renderSettings		}		// override public function get selectedImageCollection() : DateGridImageCollection { return }		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OutPlane(e : InteractiveScene3DEvent) : void {			// e.displayObject3D.alpha = _renderSettings.alpha;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OverPlane(e : InteractiveScene3DEvent) : void {			// e.displayObject3D.alpha = _renderSettings.alphaRollOver;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function SelectPlane(e : InteractiveScene3DEvent) : void {			if ( selectedID != -1 )				render(-1);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function AnimationComplete(e : Event = null) : void {			super.AnimationComplete();			animationCompleteFlag = true;			_isVisible = true;			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SCROLL_COMPLETE, true);			if ( selectedRecord != null )				ge.selectedID = selectedRecord._id;			if ( data != null )				ge.totalItems = data.length - 1;			dispatchEvent(ge);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function MouseDownEvent(e : MouseEvent) : void {		}		override public function MouseUpEvent(e : MouseEvent) : void {		}		override public function MouseMoveEvent(e : MouseEvent) : void {		}		override public function DragEvent(xPos : Number, yPos : Number) : void {		}	}}