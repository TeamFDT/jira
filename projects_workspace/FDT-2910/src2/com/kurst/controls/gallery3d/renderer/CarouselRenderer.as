/******************************************************************************************************************************************************************************** *  * Class Name  	: karimbeyrouti * Version 	  	: com.kurst.controls.gallery3d.renderer.GridRenderer * Description 	: Grid Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		destroy() * 		setRenderData( a : Array ) : void * 		setGallerySettings( settings : GallerySettings ) : void * 		setRenderSettings( s : * ) : void * 		getRenderSettings( ) : * * 		render( selectedID : Number,  invalidate : Boolean = false ) : void * * EVENTS *  * 		Gallery3dEvent.SCROLL_COMPLETE *  ******************************************************************************************************************************************************************************** * **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.renderer {	// import gs.*;	import com.greensock.*	import com.kurst.controls.gallery3d.data.DateGridImageCollection;	// import com.gskinner.motion.GTween;	import com.kurst.controls.gallery3d.renderer.GalleryRenderer;	import com.kurst.controls.gallery3d.renderer.IGalleryRenderer;	import com.kurst.controls.gallery3d.settings.CarouselSettings;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.events.Gallery3dEvent;	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.BitmapMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;	import com.kurst.pv3d.objects.PlaneX	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import org.papervision3d.materials.MovieMaterial	import com.kurst.controls.gallery3d.assets.CoreAsset	import com.kurst.controls.gallery3d.assets.DynamicMaterialAsset	public class CarouselRenderer extends GalleryRenderer implements IGalleryRenderer {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _settings : GallerySettings;		private var _renderSettings : CarouselSettings		private var data : Array;		private var selectedID : Number;		private var prevrZ : Number = -1;		private var initFlag : Boolean = false;		private var selectedPlane : PlaneX;		private var targetDO : DisplayObject3D;		private var initCameraFlag : Boolean = false;		private var prevSelectedID : Number = -1;		public var _angle : Number = 0;		private var _cam : CameraObject3D;		private var dist : Number = -1100		private var animationCompleteFlag : Boolean = true		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function CarouselRenderer(settings : CarouselSettings) {			_renderSettings = settings			targetDO = new DisplayObject3D();		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		override public function destroy() : void {			super.destroy()			// TweenMax.killAllDelayedCalls();			if ( data != null ) {				for ( var j : int = 0 ; j < data.length ; j++ ) {					var r : Object = data[j];					if ( r != null ) {						var pl : PlaneX = r.plane;						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					}				}			}			_cam = null;			targetDO = null;			selectedPlane = null;			prevrZ = undefined;			_settings = null;			data = null;			selectedID = undefined;			selectedRecord = null;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function render(sID : Number, invalidate : Boolean = false) : void {			if ( sID < 0 ) return ;			// TweenMax.killAllDelayedCalls();			if ( selectedRecord != null )				TweenMax.killDelayedCallsTo(selectedRecord.plane)			if ( selectedRecord != null )				selectedRecord.plane.material.smooth = false;			selectedID = ( invalidate == true && selectedID == -1) ? -1 : sID			if ( sID != -1 ) {				var record : Object = ( selectedID == -1 ) ? {_id:-2} : data[ selectedID ];				// Record of new plane				selectedRecord = record;			}			var i : int = 0			// Loop - Counter			var rec : Object			// Loop - Record			var p : PlaneX			// Loop - Plane			var tweenTime : Number = _renderSettings.animationSelectedTime;			// Tween Duration			var easeFnc : Function = _renderSettings.animationEasingFunction			// Tween Easing			var bm : BitmapMaterial			var tx : Number, 			ty : Number, 			tz : Number, 			ts : Number, 			ta : Number			var calcDelay : Number = 0;			var l : int = data.length;			// ------------------------------------------------------------------------------			// reposition all plane / items on display			var radius : Number = radius			// -10;			var angleStep : Number = 360 / l;			var angleRad : Number;			var cameraTweenTime : Number = 0;			for ( i ; i < l ; i++ ) {				if ( !initFlag && !invalidate )					calcDelay += _renderSettings.animationInitialDrawTime;				rec = data[i];				p = rec.plane;				var ca : CoreAsset = ( ( p.material as MovieMaterial ).movie as CoreAsset )				ca.thumbQuality = _renderSettings.thumbnailQuality;				// ------------------------------------------------------------------------------				// CAMERA				if ( rec._id == sID ) {					selectedPlane = p;					p.material.smooth = true;					if ( invalidate && _cam != null ) {						_angle = rec._id * angleStep						_cam.x = ( Math.cos(_angle * Math.PI / 180) * _renderSettings.radiusCamera )						_cam.y = 0						// ( 0 ) - _cam.y )  * _renderSettings.cameraSpeed						_cam.z = ( Math.sin(_angle * Math.PI / 180) * _renderSettings.radiusCamera )					} else {						cameraTweenTime = ( !initFlag ) ? _renderSettings.animationInitialCameraTime : _renderSettings.animationCameraTime						TweenMax.to(this, cameraTweenTime, {_angle:rec._id * angleStep, ease:easeFnc});					}				}				// ------------------------------------------------------------------------------				// PLANE				p.container				p.visible = true;				angleRad = ( rec._id * angleStep ) * Math.PI / 180				tz = Math.sin(angleRad) * _renderSettings.radius;				tx = Math.cos(angleRad) * _renderSettings.radius;				ty = ( angleRad * -1 ) * (180 / Math.PI) + 270;				ts = _renderSettings.scale;				ta = ( selectedID == rec._id ) ? _renderSettings.alphaSelected : _renderSettings.alpha;				if ( invalidate ) {					if ( _cam != null ) {						_cam.x = ( Math.cos(_angle * Math.PI / 180) * _renderSettings.radiusCamera )						_cam.y = 0						// ( 0 ) - _cam.y )  * _renderSettings.cameraSpeed						_cam.z = ( Math.sin(_angle * Math.PI / 180) * _renderSettings.radiusCamera )					}					if ( selectedID == rec._id ) {						p.x = Math.cos(angleRad) * _renderSettings.radiusSelected						p.y = 0						p.z = Math.sin(angleRad) * _renderSettings.radiusSelected						p.scale = ts						p.rotationX = 0						p.rotationY = ty						p.alpha = ta					} else {						p.x = tx;						p.y = 0;						p.z = tz;						p.scale = ts;						p.rotationX = 0;						p.rotationY = ty;						p.alpha = ta;					}				} else {					if ( selectedID == rec._id ) {						// ------------------------------------------------------------------------------						// SELECTED PLANE						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						p.alpha = ta;						// EXTRUDE						TweenMax.to(p, tweenTime, {x:Math.cos(angleRad) * _renderSettings.radiusSelected, y:0, z:Math.sin(angleRad) * _renderSettings.radiusSelected, scale:ts, rotationX:0, rotationY:ty, alpha:ta, delay:calcDelay, ease:easeFnc, onComplete:AnimationComplete});						animationCompleteFlag = false;					} else {						// ------------------------------------------------------------------------------						// ALL OTHER PLANES						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);						p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);						// Tween all other planes						TweenMax.to(p, tweenTime, {x:tx, y:0, z:tz, scale:ts, rotationX:0, rotationY:ty, alpha:ta, delay:calcDelay, ease:easeFnc});					}				}			}			prevSelectedID = sID;			initFlag = true;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function renderCamera(_camera : CameraObject3D, s : Stage = null) : void {			if ( !initCameraFlag ) {				_cam = _camera;				_camera.target = targetDO;				initCameraFlag = true;			}			if ( _cam != null ) {				_cam.x += ( ( Math.cos(_angle * Math.PI / 180) * _renderSettings.radiusCamera ) - _cam.x ) * _renderSettings.animationCameraSpeed				_cam.y += ( ( 0 ) - _cam.y ) * _renderSettings.animationCameraSpeed				_cam.z += ( ( Math.sin(_angle * Math.PI / 180) * _renderSettings.radiusCamera ) - _cam.z ) * _renderSettings.animationCameraSpeed			}		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get isDeselected() : Boolean {			return false		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setRenderData(a : Array) : void {			data = a;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setGallerySettings(settings : GallerySettings) : void {			_settings = settings;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function setRenderSettings(s : *) : void {			_renderSettings = s;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function getRenderSettings() : * {			return _renderSettings		}		// override public function get selectedImageCollection() : DateGridImageCollection { return }		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OutPlane(e : InteractiveScene3DEvent) : void {			e.displayObject3D.alpha = _renderSettings.alpha;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OverPlane(e : InteractiveScene3DEvent) : void {			e.displayObject3D.alpha = _renderSettings.alphaRollOver;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function SelectPlane(e : InteractiveScene3DEvent) : void {			if ( selectedID != -1 )				render(-1);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function AnimationComplete(e : Event = null) : void {			super.AnimationComplete();			animationCompleteFlag = true;			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SCROLL_COMPLETE, true);			if ( selectedRecord != null )				ge.selectedID = selectedRecord._id;			if ( data != null )				ge.totalItems = data.length - 1;			dispatchEvent(ge);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function MouseDownEvent(e : MouseEvent) : void {		}		override public function MouseUpEvent(e : MouseEvent) : void {		}		override public function MouseMoveEvent(e : MouseEvent) : void {		}		override public function DragEvent(xPos : Number, yPos : Number) : void {		}	}}