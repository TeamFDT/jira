/******************************************************************************************************************************************************************************** *  * Class Name  	: karimbeyrouti * Version 	  	: com.kurst.controls.gallery3d.renderer.GridRenderer * Description 	: Grid Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 27/05/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		destroy() * 		setRenderData( a : Array ) : void * 		setGallerySettings( settings : GallerySettings ) : void * 		setRenderSettings( s : * ) : void * 		getRenderSettings( ) : * * 		render( selectedID : Number,  invalidate : Boolean = false ) : void * * EVENTS *  * 		Gallery3dEvent.SCROLL_COMPLETE *  ******************************************************************************************************************************************************************************** * **********************************************************************************************************************************************************************************/package com.kurst.controls.gallery3d.renderer {	import flash.display.DisplayObject;	import com.greensock.*	import com.kurst.controls.gallery3d.data.DateGridData;	import com.kurst.controls.gallery3d.data.DateGridImageCollection;	import com.kurst.controls.gallery3d.renderer.GalleryRenderer;	import com.kurst.controls.gallery3d.renderer.IGalleryRenderer;	import com.kurst.controls.gallery3d.settings.DateGridSettings;	import com.kurst.controls.gallery3d.settings.GallerySettings;	import com.kurst.events.Gallery3dEvent;	import com.kurst.utils.NumberUtils;	import com.kurst.pv3d.objects.PlaneX	import org.papervision3d.core.proto.CameraObject3D;	import org.papervision3d.events.InteractiveScene3DEvent;	import org.papervision3d.materials.special.ParticleMaterial;	import org.papervision3d.objects.DisplayObject3D;	import org.papervision3d.objects.primitives.Plane;	import org.papervision3d.objects.special.ParticleField;	import org.papervision3d.render.BasicRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;	import org.papervision3d.materials.MovieMaterial	import flash.display.Stage;	import flash.events.Event;	import flash.events.MouseEvent;	import org.papervision3d.materials.MovieMaterial	import com.kurst.controls.gallery3d.assets.CoreAsset	import com.kurst.controls.gallery3d.assets.DynamicMaterialAsset	public class DateGridRenderer extends GalleryRenderer implements IGalleryRenderer {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var _settings : GallerySettings;		private var _renderSettings : DateGridSettings		private var dateData : DateGridData;		private var data : Array;		private var selectedID : Number;		// private var selectedRecord 				: Object;		private var previousZ : Number = -1;		private var initFlag : Boolean = false;		private var animationCompleteFlag : Boolean = true		private var _selectedCollectionArrayID : Number = 0;		private var _selectedImageCollection : DateGridImageCollection		private var selectedPlane : PlaneX;		private var cameraTarget : DisplayObject3D;		private var renderer : BasicRenderEngine		private var scene : Scene3D		private var camera : CameraObject3D		private var viewport : Viewport3D		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function DateGridRenderer(settings : DateGridSettings) {			cameraTarget = new DisplayObject3D();			_renderSettings = settings			dateData = new DateGridData();		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function init(_renderer : BasicRenderEngine = null, _scene : Scene3D = null, _camera : CameraObject3D = null, _viewport : Viewport3D = null) : void {			renderer = _renderer			scene = _scene			camera = _camera			viewport = _viewport			camera.target = null;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function enumerateDates() : Array {			var dateArray : Array = new Array();			var obj : Object;			for ( var c : int = 0 ; c < dateData.length ; c++ ) {				obj = new Object				obj.id = c;				obj.date = dateData.getItemAt(c).date				dateArray.push(obj);			}			return dateArray;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		public function selectGroup(id : Number) : void {			if ( id >= 0 && id < dateData.length ) {				_selectedCollectionArrayID = id;				_selectedImageCollection = dateData.getItemAt(_selectedCollectionArrayID)			}			render(-1);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		public function selectPreviousGroup() : void {			_selectedCollectionArrayID++			if ( _selectedCollectionArrayID > dateData.length - 1 )				_selectedCollectionArrayID = 0;			_selectedImageCollection = dateData.getItemAt(_selectedCollectionArrayID)			render(-1);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		public function selectNextGroup() : void {			_selectedCollectionArrayID--			if ( _selectedCollectionArrayID < 0 )				_selectedCollectionArrayID = dateData.length - 1;			_selectedImageCollection = dateData.getItemAt(_selectedCollectionArrayID)			render(-1);		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function destroy() : void {			camera.target = null;			super.destroy()			// TweenMax.killAllDelayedCalls();			if ( data != null ) {				for ( var j : int = 0 ; j < data.length ; j++ ) {					var r : Object = data[j];					var pl : PlaneX = r.plane;					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					pl.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);				}			}			_settings = null;			data = null;			selectedID = undefined;			selectedRecord = null;			selectedPlane = null;			dateData.destroy();		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function render(sID : Number, invalidate : Boolean = false) : void {			if ( selectedRecord != null && sID != selectedID )				TweenMax.killDelayedCallsTo(selectedRecord.plane)			selectedID = ( invalidate == true && selectedID == -1) ? -1 : sID			var record : Object = ( selectedID == -1 ) ? {_id:-2, plane:selectedRecord.plane} : data[ selectedID ];			// Record of new plane			selectedRecord = record;			if ( record.plane != null )				selectedPlane = record.plane as PlaneX;			var l : int = dateData.length;			var i : int = 0;			var rec : Object			// Loop - Record			var p : PlaneX			// Loop - Plane			var tweenTime : Number = _renderSettings.animationTime;			// Tween Duration			var easeFnc : Function = _renderSettings.animationEasingFunction			// Tween Easing			var col : int = _renderSettings.gridCols			// 0;			var row : int = _renderSettings.gridRows			// 0;			var rZ : Number, 			tx : Number, 			ty : Number, 			tz : Number, 			ts : Number, 			ta : Number			var calcDelay : Number = 0;			var posCounter : Number = 0;			// var minX					: Number			var maxX : Number			var midX : Number;			var maxCol : Number;			var minY : Number			var maxY : Number			var midY : Number;			var maxRow : Number;			var imageCollection : DateGridImageCollection;			var imageCollectionLength : int;			// ------------------------------------------------------------------------------			// Iterate through each image collection			for ( i ; i < l ; i++ ) {				// Reference the image collection				imageCollection = dateData.getItemAt(i);				imageCollectionLength = imageCollection.length;				// Reset row, col and counter for every collection				row = 0;				col = 0;				posCounter = 0;				for ( var j : int = 0 ; j < imageCollectionLength ; j++ ) {					rec = imageCollection.getItemAt(j);					p = rec.plane;					p.visible = true;					/*					var ca : CoreAsset 	= ( ( p.material as MovieMaterial ).movie as CoreAsset ) 					ca.thumbQuality = _renderSettings.thumbnailQuality; 					 */					// ------------------------------------------------------------------------------					// reset event listeners					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane);					p.removeEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OVER, OverPlane, false, 0, true);					p.addEventListener(InteractiveScene3DEvent.OBJECT_OUT, OutPlane, false, 0, true);					// ------------------------------------------------------------------------------					maxCol = ( imageCollectionLength < _renderSettings.gridCols ) ? imageCollectionLength + 1 : _renderSettings.gridCols;					maxX = ( maxCol * _renderSettings.gridXSpacing );					// Grid max x value					midX = ( maxX ) / 2;					// Grid mid point					maxRow = Math.round(( imageCollectionLength + 1 ) / _renderSettings.gridRows);					maxRow = ( maxRow == 0 ) ? 1 : maxRow;					minY = 0;					maxY = ( maxRow * _renderSettings.gridYSpacing )					midY = ( maxY - minY ) / 2					// ------------------------------------------------------------------------------					calcDelay += ( !initFlag && !invalidate ) ? _renderSettings.animationInitialDrawTime : 0;					if ( posCounter % _renderSettings.gridCols == 0 ) {						row--;						col = 0;					}					// ------------------------------------------------------------------------------					tx = ( imageCollectionLength == 1 ) ? 0 : ( col * _renderSettings.gridXSpacing ) - midX + _renderSettings.gridXOffset;					ty = ( imageCollectionLength == 1 ) ? 0 : ( row * _renderSettings.gridYSpacing ) + midY + _renderSettings.gridYOffset;					tz = _renderSettings.gridGroupZIncrement * i;					ts = _renderSettings.gridScale					ta = ( _selectedCollectionArrayID == i ) ? _renderSettings.alphaSelected : _renderSettings.alpha;					if ( rec._id == selectedID ) {						ta = 1;						tx = 0;						ty = 0;						tz += _renderSettings.gridSelectedZ						_selectedCollectionArrayID = i;						p.addEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane, false, 0, true);						_selectedImageCollection = imageCollection					} else {						p.removeEventListener(InteractiveScene3DEvent.OBJECT_PRESS, SelectPlane);					}					if ( invalidate ) {						p.x = tx;						p.y = ty;						p.z = tz;						p.scale = ts;						p.rotationX = 0;						p.rotationY = 0;						p.alpha = ta;					} else {						TweenMax.to(p, tweenTime, {x:tx, y:ty, z:tz, scale:ts, rotationX:0, rotationY:0, alpha:ta, delay:calcDelay, ease:easeFnc});					}					// ------------------------------------------------------------------------------					// Increment Counters					col++;					posCounter++;				}			}			initFlag = true;			previousZ = _renderSettings.gridRandomZPosition;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function renderCamera(_camera : CameraObject3D, s : Stage = null) : void {			_camera.x += ( 0 - _camera.x ) * _renderSettings.animationCameraSpeed;			_camera.y += ( 0 - _camera.y ) * _renderSettings.animationCameraSpeed;			_camera.z += ( ( ( _renderSettings.gridGroupZIncrement * _selectedCollectionArrayID) + _renderSettings.cameraZOffset ) - _camera.z ) * _renderSettings.animationCameraSpeed			_camera.target = cameraTarget			cameraTarget.z = _camera.z + 200;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setRenderData(a : Array) : void {			data = a;			dateData.setData(data);			if ( _selectedImageCollection != null ) {				var prevSelectionArrayID : Number = _selectedCollectionArrayID;				for ( var c : int = 0 ; c < dateData.length ; c++ ) {					var imgC : DateGridImageCollection = dateData.getItemAt(c);					if ( imgC.id == _selectedImageCollection.id ) {						_selectedCollectionArrayID = c;					}				}				if ( prevSelectionArrayID != _selectedCollectionArrayID )					updateCamera();			}		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private function updateCamera() : void {			// camera.x 				= ( 0 - camera.x ) * _renderSettings.animationCameraSpeed;			// camera.y 				= ( 0 - camera.y ) * _renderSettings.animationCameraSpeed;			camera.z = ( _renderSettings.gridGroupZIncrement * _selectedCollectionArrayID) + _renderSettings.cameraZOffset			// - camera.z ) * _renderSettings.animationCameraSpeed			cameraTarget.z = camera.z + 200;			camera.target = cameraTarget		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get isDeselected() : Boolean {			return (selectedID < 0 );		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function setGallerySettings(settings : GallerySettings) : void {			_settings = settings;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		override public function setRenderSettings(s : *) : void {			_renderSettings = s;		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function getRenderSettings() : * {			return _renderSettings		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function get selectedImageCollection() : DateGridImageCollection {			return _selectedImageCollection;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OutPlane(e : InteractiveScene3DEvent) : void {		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function OverPlane(e : InteractiveScene3DEvent) : void {		}		/**		 * @method 		 * @tooltip		 * @param  		 */		private function SelectPlane(e : InteractiveScene3DEvent) : void {			var nID : Number = Number(e.displayObject3D.name)			if ( selectedID == nID ) {				render(-1);			}		}		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function AnimationComplete(e : Event = null) : void {			super.AnimationComplete();			animationCompleteFlag = true;			var ge : Gallery3dEvent = new Gallery3dEvent(Gallery3dEvent.SCROLL_COMPLETE, true);			if ( selectedRecord != null )				ge.selectedID = selectedRecord._id;			if ( data != null )				ge.totalItems = data.length - 1;			dispatchEvent(ge);		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method 		 * @tooltip		 * @param  		 */		override public function MouseDownEvent(e : MouseEvent) : void {		}		override public function MouseUpEvent(e : MouseEvent) : void {		}		override public function MouseMoveEvent(e : MouseEvent) : void {		}		override public function DragEvent(xPos : Number, yPos : Number) : void {		}	}}