/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.listbox.ListContainer * Version 	  	: 1 * Description 	: List Container *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti * Date 			: 21/01/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *	selectedByID( array_id:Number ):ListItem *	previous( ):ListItem *	next( ):ListItem *	setData( dataObject:DataProvider ):void *	addItem ( dataObject:Object, id:Number = -1):ListItem * * PROPERTIES *  *	symbol *	labelField *	itemList *	padding *	useAutoSelection *	data *  * EVENTS *  *	ListBoxEvent.CONTENT_RESIZED * 	ListBoxEvent.SELECT_ITEM * 	ListBoxEvent.CONTENT_UPDATED  *  ******************************************************************************************************************************************************************************** **********************************************************************************************************************************************************************************/package com.kurst.controls.listbox {	import com.kurst.controls.core.KurstUIComponentBase;	import com.kurst.controls.listbox.core.ListItem;	import com.kurst.events.ListBoxEvent;	import fl.data.DataProvider;	import flash.display.Sprite;	import flash.events.Event;	public class ListContainer extends KurstUIComponentBase {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		private var lastItem : ListItem;		private var _content : Sprite ;		private var _data : DataProvider;		private var _contentList : Vector.<ListItem>;		private var _selectedItem : ListItem;		private var lbAddedToStage : Boolean = false;		private var _labelField : String = "label";		private var _symbol : Class = SimpleListItem;		private var _padding : Number = 0;		private var _useAutoSelection : Boolean = true;		private var _selectable : Boolean = true;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function ListContainer() {			_content = new Sprite();			_data = new DataProvider();			_contentList = new Vector.<ListItem>();			addEventListener(Event.ADDED_TO_STAGE, AddedToStage, false, 0, true);		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @property 		 * @tooltip  		 */		public function removeItem(item : ListItem) : void {			for ( var c : int = 0 ; c < _contentList.length ; c++ ) {				if ( _contentList[c] == item ) {					var locatedItem : ListItem = _contentList[c] as ListItem;					for ( var d : int = 0 ; d < data.length ; d++ ) {						if ( data.getItemAt(d) == locatedItem.data ) {							data.removeItemAt(d);						}					}					_content.removeChild(locatedItem);					_contentList.splice(c, 1);					if ( _contentList.length > 0 ) {						lastItem = _contentList[_contentList.length - 1 ];					} else {						lastItem = null;						_selectedItem = null;					}				}			}			draw();		}		/**		 * @property draw():void		 * @tooltip position all the list items 		 */		override protected function draw() : void {			// previously positioned list item			var prevItem : ListItem = null;			// iterate through every list item			for ( var c : Number = 0 ; c < _contentList.length ; c++ ) {				// reference the list item				var reposItem : ListItem = _contentList[c] as ListItem;				// set the size of the item ( width only )				reposItem.setSize(width, reposItem.height);				reposItem.y = 0;				// calculate the padding				var padding : Number = ( c == 0 ) ? 0 : _padding;				// get the height of the previous item				var h : Number = ( prevItem == null ) ? 0 : prevItem.height;				// get the y position of the list item				var yP : Number = ( prevItem == null ) ? 0 : h + prevItem.y + padding;				// set the y position of the list item				reposItem.y = yP;				// set the previous item				prevItem = reposItem;			}			dispatchEvent(new ListBoxEvent(ListBoxEvent.CONTENT_RESIZED));		}		/**		 * @property clear():Void		 * @tooltip remove all list items from the display list		 */		public function clear() : void {			// iterate through every list item			for ( var c : Number = 0 ; c < _contentList.length ; c++ ) {				var currentItem : ListItem = _contentList[c] as ListItem;				currentItem.destroy();				currentItem.removeEventListener(ListBoxEvent.SELECT_ITEM, SelectListItemEvent);				if ( _content.contains(currentItem))					_content.removeChild(currentItem);			}			// reset all the parameters as all list items have been removed			_contentList = new Vector.<ListItem>();			lastItem = null;			_selectedItem = null;			updateContent();		}		/**		 * @property selectedByID( array_id:Number )		 * @tooltip select an listItem by ID		 * @param array ID		 */		public function selectedByID(array_id : Number) : ListItem {			// Select the list item			SelectListItem(_contentList[ array_id ] as ListItem);			// return the reference to the list item			return _contentList[ array_id ] as ListItem;		}		/**		 * @property previous( )		 * @tooltip select previous listItem		 */		public function previous() : ListItem {			// if no list items exits no point in continuing further			if ( _contentList.length == 0) return null;			var li : ListItem;			// if no item is currently selected			if ( _selectedItem == null ) {				// select the first one				li = _contentList[0] as ListItem;				SelectListItem(li);				li.Click();				return li;				// return the selected item			} else {				// if an item is currently selected				var current_ID : Number = _selectedItem.id;				// get the previous ID				var new_ID : Number = current_ID - 1;				// make sure the ID is in range				if ( new_ID < 0  ) {					new_ID = _contentList.length - 1;				}				// Select the previous item				li = _contentList[ new_ID ]  as ListItem;				SelectListItem(li);				li.Click();				return li;				// return the selected item			}		}		/**		 * @property next( )		 * @tooltip select next listItem		 */		public function next() : ListItem {			// if no list items exits no point in continuing further			if ( _contentList.length == 0) return null;			var li : ListItem;			// if no item is currently selected			if ( _selectedItem == null ) {				// select the first one				li = _contentList[0] as ListItem;				SelectListItem(li);				li.Click();				return li;				// return the selected item			} else {				// if an item is currently selected				var current_ID : Number = _selectedItem.id;				// get the next ID				var new_ID : Number = current_ID + 1;				// make sure the ID is in range				if ( new_ID > _contentList.length - 1 ) {					new_ID = 0;				}				// Select the previous item				li = _contentList[ new_ID ] as ListItem;				SelectListItem(li);				li.Click();				return li ;				// return the selected item			}		}		/**		 * @property setData( dataObject:DataObject )		 * @tooltip set the data and build the list		 */		public function setData(dataObject : DataProvider) : void {			data = dataObject;		}		/**		 * @property addItem ( dataObject:Object ):MovieClip		 * @tooltip add an listItem to the content list		 * @param dataObject containing listItem data		 * @return movieclip of menu listItem		 */		public function addItem(dataObject : Object, id : Number = -1, fromProvider : Boolean = false) : ListItem {			// Reference the class			// var classDefintion : Class 		= getDefinitionByName( _symbol ) as Class;			// create a new list item			var currentItem : ListItem = new _symbol() as ListItem;			// add it to the display list			_content.addChild(currentItem);			// calc padding			var pad : Number = ( lastItem == null  ) ? 0 : _padding;			// calc last item height			var lh : Number = ( lastItem == null ) ? 0 : lastItem.height ;			// position the current item			currentItem.y = ( lastItem == null  ) ? pad : Math.round(lh + lastItem.y + pad);			currentItem.selectable = _selectable;			// assign id to the list item			dataObject._id = ( id == -1 ) ? _contentList.length : id;			currentItem.id = dataObject._id ;			// assign the data to the list item			currentItem.data = dataObject;			currentItem.addEventListener(ListBoxEvent.SELECT_ITEM, SelectListItemEvent, false, 0, true);			currentItem.width = _width;			lastItem = currentItem;			updateContent();			// assign the text to the list item			currentItem.setText(dataObject[ _labelField ]);			// and add it to the content array;			_contentList.push(currentItem);			if ( !fromProvider ) {				data.addItem(dataObject);			}			return currentItem;		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @property updateContent( )		 * @tooltip called when the content is updated		 */		private function updateContent() : void {			dispatchEvent(new ListBoxEvent(ListBoxEvent.CONTENT_UPDATED));		}		/**		 * @method AddedToStage( e : Event ) : void		 * @tooltip added to stage event handler		 * @param e : Event		 */		private function AddedToStage(e : Event) : void {			lbAddedToStage = true;			addChild(_content);			// if the data is set before the list has			// been added to stage - add the data and draw list items			if ( data != null ) {				data = _data;			}		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @property symbol		 * @tooltip symbol to use for the ListItem		 * @param String		 * @return String 		 */		public function get listItem() : Class {			return _symbol;		}		public function set listItem(symbol : Class) : void {			_symbol = symbol;		}		/**		 * @property labelField		 * @tooltip data item to be used for the label		 * @param string		 * @return string		 */		public function set labelField(f : String) : void {			_labelField = f;		}		public function get labelField() : String {			return _labelField ;		}		/**		 * @property itemList		 * @tooltip all item in list object		 * @return array containing list items		 */		public function get itemList() : Vector.<ListItem> {			return _contentList ;		}		/**		 * @property padding		 * @tooltip padding between each item		 * @param number - distance		 * @return  number - distance		 */		public function set padding(aNumber : Number) : void {			_padding = aNumber ;			draw();		}		public function get padding() : Number {			return _padding ;		}		/**		 * @property useAutoSelection		 * @tooltip use auto selection - flase will disable the automatic selection of list items		 * @param Boolean		 * @return Boolean		 */		public function set useAutoSelection(flag : Boolean) : void {			_useAutoSelection = flag;		}		public function get useAutoSelection() : Boolean {			return _useAutoSelection ;		}		/**		 * @property  data ( dataObject:DataObject ):DataObject		 * @tooltip get/set the data of the list		 * @param DataObject		 * @return DataObject		 */		public function set data(dp : DataProvider) : void {			// new data is being added - so clear / destroy any display object			clear();			// store the data			_data = dp;			// check the list box has been added to the stage before adding all the items to the display list			if ( !lbAddedToStage ) return ;			// Add the items to the display list			var l : Number = _data.length;			for ( var c : Number = 0 ; c < l ; c++ ) {				addItem(_data.getItemAt(c), c, true);			}		}		public function get data() : DataProvider {			return _data;		}		/**		 * @property 		 * @tooltip 		 * @param 		 * @return 		 */		public function get contentList() : Vector.<ListItem> {			return _contentList;		}		/**		 * @property selectedItem		 * @tooltip get the active list item		 * @param ListItem		 * @return String 		 */		public function get selectedItem() : ListItem {			return _selectedItem;		}		/**		 * @property 		 * @tooltip 		 * @param 		 * @return 		 */		public function get selectable() : Boolean {			return _selectable;		}		public function set selectable(selectable : Boolean) : void {			_selectable = selectable;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		/**		 * @method SelectListItemEvent( e : ListBoxEvent )		 * @tooltip Select List Item event handler		 */		private function SelectListItemEvent(e : ListBoxEvent) : void {			if ( !_selectable) return;			var li : ListItem = ListItem(e.target);			SelectListItem(li);		}		/**		 * @method onDeselect(e)		 * @tooltip event handler called when an item is deselected		 */		protected function onDeselect(e : ListItem) : void {		}		/**		 * @method onSelect( e )		 * @tooltip vent handler called when an item is onSelected		 */		private function SelectListItem(lstItemMC : ListItem) : void {			if ( _useAutoSelection && _selectedItem != null ) {				_selectedItem.selected = false;			}			lstItemMC.selected = true;			_selectedItem = lstItemMC;		}		/**		 * @method modelChanged		 * @tooltip Called when the dataprovider has changed		 */		protected function modelChanged(e : Object) : void {			e;			clear();			var l : Number = _data.length;			for ( var c : Number = 0 ; c < l ; c++ ) {				addItem(_data.getItemAt(c), c, true);			}			updateContent();		}	}}