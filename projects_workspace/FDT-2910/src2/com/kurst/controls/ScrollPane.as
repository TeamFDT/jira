/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.ScrollPane * Version 	  	:  * Description 	:  *  ******************************************************************************************************************************************************************************** *  * Author 		: Karim Beyrouti  * Date 		: 14/02/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  * 		attach( idName : String ) : MovieClip * 		attachMovie( mc : * ) : * * 		setScrollBounds( ) : void  * 		scrollBy( increment : Number, isPixelValue : Boolean = true ) : void * 		hscrollBy( increment : Number, isPixelValue : Boolean = true) : void *  * PROPERTIES * *		Generic: *		 *			content( ) : * *			scrollHeight( ) : Number  *			backgroundColour() : Number *			backgroundAlpha() : Number *			ease() : Function *			useAnimation() : Boolean *			animationDuration() : Number  *		 *		Flash 9/10 - Scroll Properties: *		 *			scrollH : Number ( get / set ) *			scrollV : Number ( get / set ) *			maxScrollH : Number ( get ) *			maxScrollV : Number ( get ) *			 *		Legacy support / Backward Compatibility: *		 *			scroll(  ) : Number *			hscroll(  ) : Number *			maxhscroll(  ) : Number *  * EVENTS *  * 		ScrollPaneEvent.CHANGE * ******************************************************************************************************************************************************************************** * NOTES: ******************************************************************************************************************************************************************************** *	 *		See UIComponent reference for other events / properties / methose *	  **********************************************************************************************************************************************************************************/package com.kurst.controls {	import flash.geom.Rectangle;	import com.greensock.TweenMax;	import com.kurst.controls.core.KurstUIComponentBase;	import com.kurst.events.ScrollPaneEvent;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.utils.getDefinitionByName;	public class ScrollPane extends KurstUIComponentBase {				public var DeadPreview 					: MovieClip;				private var _useAnimation 				: Boolean = true;		private var _animationDuration 			: Number = .2;		private var _container 					: MovieClip;		private var _background 				: MovieClip;		private var _contentReference 			: *;		private var _contentTargetMC 			: MovieClip;		private var _backgroundColour 			: uint = 0x000000;		private var _backgroundAlpha 			: Number = 0;		private var _scrollh 					: Number;		private var _scroll 					: Number;		private var _scrollmax 					: Number = 0;		private var _scrollhmax 				: Number = 0;		private var _scollHeight 				: Number = 0;		private var _scollHeightSetFlag 		: Boolean = false;		private var _scollWidth 				: Number = 0;		private var _scollWidthSetFlag 			: Boolean = false;		private var _addedToStageFlag 			: Boolean = false;		private var _attachContentFlag			: Boolean = false;		private var _scrollPolicy				: Boolean = true;		private static var MOUSEWHEELSTEP 		: Number = 10;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		public function ScrollPane() {			super();			addEventListener(Event.ADDED_TO_STAGE, AddedToStage, false, 0, true);		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				// This might need a little TESTINg		/**		 * @method attach( linkageID ):MovieClip		 * @tooltip attach a movieclip to the scrollarea		 * @param linkageID		 * @return MovieClip - returns a reference to the attached movieclip		 */		public function attach(idName : String) : MovieClip {			// Reference the class to be attached			var classDefintion : Class = getDefinitionByName(idName) as Class;			// create the instance			var instance : * = new classDefintion();			// remove content if its already attached			if ( _contentReference != null ) {				_contentTargetMC.removeChild(_contentReference);			}			// set the new content			_contentReference = instance;			// ---------------------------------------------------------			// TRICKY			// ---------------------------------------------------------			// check if the scroll pane has been added to the stage			// ---------------------------------------------------------			if ( _addedToStageFlag ) {				// if SP has been added to the stage - add the content				_contentTargetMC.addChild(instance);				// reset the scroll parameters				// _scroll 	= 0;				// _scrollh 	= 0;				resetScroll();				// reset the scroll parameters				initScrollHeight();				// initialize the scroll height				initScrollWidth();				// initialize the scroll width				setScrollBounds();				// set the scroll bounds ( define how much the area can scroll )			} else {				// if SP has not been added to the stage				// add the content later when it is added to the stage				_attachContentFlag = true;			}			// Scrollpane change event			dispatchEvent(new ScrollPaneEvent(ScrollPaneEvent.CHANGE));			// return the reference to the content			return _contentReference as MovieClip;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function destroy() : void {			removeContent();			removeEventListener(MouseEvent.MOUSE_WHEEL, MouseWheelHandler);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function removeContent() : void {			if ( _contentReference != null && _contentReference != undefined) {				// remove the content.				if (  _contentTargetMC.contains(_contentReference) )					_contentTargetMC.removeChild(_contentReference);			}		}		/**		 * @method attach( linkageID ):MovieClip		 * @tooltip attach a movieclip to the scrollarea		 * @param linkageID		 * @return MovieClip - returns a reference to the attached movieclip		 */		public function attachMovie(mc : *) : * {			// if there is content in the pane			if ( _contentReference != null && _contentReference != undefined) {				// remove the content.				if (  _contentTargetMC.contains(_contentReference) )					_contentTargetMC.removeChild(_contentReference);			}			// set the content reference			_contentReference = mc;			// ---------------------------------------------------------			// TRICKY			// ---------------------------------------------------------			// check if the scroll pane has been added to the stage			// ---------------------------------------------------------			if ( _addedToStageFlag && stage != null ) {				// if SP has been added to the stage - add the content				_contentTargetMC.addChild(_contentReference);				// _scroll 	= 0;				// _scrollh 	= 0;				resetScroll();				// reset the scroll parameters				initScrollHeight();				// initialize the scroll height				initScrollWidth();				// initialize the scroll width				setScrollBounds();				// set the scroll bounds ( define how much the area can scroll )			} else {				// if SP has not been added to the stage				// add the content later when it is added to the stage				_attachContentFlag = true;			}			// Scrollpane change event			dispatchEvent(new ScrollPaneEvent(ScrollPaneEvent.CHANGE));			// return the reference to the content			return _contentReference;		}		/**		 * @method setScrollBounds();		 * @tooltip refresh the scroll bounds		 */		public function setScrollBounds() : void {			// check if we scrolled to the bottom of the pane			var scrollMaxedFlag : Boolean = ( _scrollmax == _scroll ) && ( _scroll != 0 );			// set the scroll max			_scrollmax = _contentTargetMC.height - height;			// check scrollmax is within bounds			_scrollmax = ( _scrollmax < 0 ) ? 0 : _scrollmax;			// set horisontal scroll			_scrollhmax = _contentTargetMC.width - width;			// check the horizontal scroll is within bounds			_scrollhmax = ( _scrollhmax < 0 ) ? 0 : _scrollhmax;			//			initScrollHeight();			initScrollWidth();			// if we are at the end of the scroll			// keep it this way and stay at the bottom of the scroll pane			if ( scrollMaxedFlag ) scroll = maxscroll;			// Scrollpane change event			dispatchEvent(new ScrollPaneEvent(ScrollPaneEvent.CHANGE));		}		/**		 * @method scrollBy ( increment, isPixelValue  ):Void		 * @tooltip scroll by specified increment		 * @param increment Number of pixels to scroll		 * @param isPixelValue 		 */		public function scrollBy(increment : Number, isPixelValue : Boolean = true) : void {			// set the scroll increment...			// if it's a pixel value - use that			// otherwise use percentage of maxscroll / height / increment			increment = isPixelValue ? increment : ( maxscroll / ( height / ( 4 * increment ) ) );			// find the new scroll position			var newScrollPos : Number = ( scroll + increment );			// if maxscroll == 0 - there is nothing to scroll			if ( maxscroll != 0 ) {				if ( newScrollPos <= maxscroll && newScrollPos >= 0 ) {					// ensure it is within bounds					scroll = newScrollPos;				} else if ( newScrollPos < 0 ) {					// if it is less than 0					scroll = 0;				} else {					// otherwise set it to maxscroll					scroll = maxscroll;				}			}		}		/**		 * @method hscrollBy( increment, isPixelValue )		 * @tooltip horisontal scroll b		 * @param increment Number of pixels to scroll		 * @param isPixelValue 		 */		public function hscrollBy(increment : Number, isPixelValue : Boolean = true) : void {			// set the scroll increment...			// if it's a pixel value - use that			// otherwise use percentage of maxscroll / height / increment			increment = isPixelValue ? increment : ( maxhscroll / ( width / ( 8 * increment ) ) );			// find the new scroll position			var newScrollPos : Number = ( hscroll + increment );			// if maxhscroll == 0 - there is nothing to scroll			if ( maxhscroll != 0 ) {				if ( newScrollPos <= maxhscroll && newScrollPos >= 0 ) {					// ensure it is within bounds					hscroll = newScrollPos	;				} else if ( newScrollPos < 0 ) {					// if it is less than 0					hscroll = 0;				} else {					// otherwise set it to maxhscroll					hscroll = maxhscroll;				}			}		}		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  RRRRR   IIIIII V     V   AAA   TTTTTT EEEEEEE		// PP   PP RR  RR    II   V     V  AAAAA    TT   EE		// PPPPPP  RRRRR     II    V   V  AA   AA   TT   EEEE		// PP      RR  RR    II     V V   AAAAAAA   TT   EE		// PP      RR   RR IIIIII    V    AA   AA   TT   EEEEEEE		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method draw() 		 * @tooltip draw the component properties 		 */		override protected function draw() : void {			// check the SP has been added to the stage			if ( stage == null ) return;			// draw the mark			/*			_maskMC.graphics.clear();			_maskMC.graphics.beginFill( 0x0000FF );			_maskMC.graphics.drawRect( 0 , 0 , width , height );			_maskMC.graphics.endFill();			 */			if ( !isNaN(width) && !isNaN(height) ) {				trace('PANE_WIDTH: ' + width + ' PANE_HEIGHT: ' + height + ' backgroundColour: ' + _backgroundColour);				scrollRect = new Rectangle(0, 0, width, height);				// draw the background				_background.graphics.clear();				_background.graphics.beginFill(_backgroundColour, _backgroundAlpha);				_background.graphics.drawRect(0, 0, width, height);				_background.graphics.endFill();				dispatchEvent(new ScrollPaneEvent(ScrollPaneEvent.CHANGE));				setScrollBounds();				// scroll = scroll;			}		}		/**		 * @method init		 * @tooltip initialize the component		 */		private function init() : void {			// create the content container			_background = new MovieClip();			_container = new MovieClip();			_contentTargetMC = new MovieClip();			/*			_maskMC 				= new MovieClip( );						_maskMC.graphics.beginFill( 0x0000FF );			_maskMC.graphics.drawRect( 0 , 0 , width , height );			_maskMC.graphics.endFill();			 */			// _contentTargetMC.mask 	= _maskMC;			scrollRect = new Rectangle(0, 0, width, height);			addChild(_background);			addChild(_container);			_container.addChild(_contentTargetMC);			// _container.addChild( _maskMC );		}		/**		 * @method resetScroll( ):Void		 * @tooltip reset the scroll position		 */		private function resetScroll() : void {			// reset the scroll parameters			_scroll = 0 ;			_scrollmax = 0 ;			_scrollh = 0 ;			_scrollhmax = 0 ;			_contentTargetMC.y = 0;			_contentTargetMC.x = 0;		}		/**		 * @method initScrollHeight ( )		 * @tooltip initialize the scroll height		 */		private function initScrollHeight() : void {			// if the scroll height is not set			// set it to slightly more than the target			// otherwise use the current scroll height			_scollHeight = ( !_scollHeightSetFlag ) ? _contentTargetMC.height * 0.01 : _scollHeight;		}		/**		 * @method initScrollWidth ( )		 * @tooltip initialize the scroll width		 */		private function initScrollWidth() : void {			// if the scroll width is not set			// set it to slightly more than the target			// otherwise use the current scroll width			_scollWidth = ( !_scollWidthSetFlag ) ? _contentTargetMC.width * 0.01 : _scollWidth ;		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method content		 * @tooltip get reference to the content object		 */		public function get content() : * {			return _contentReference;		}		/**		 * @method scrollHeight ( val:Number)		 * @tooltip get / set the scroll height		 * @param val : Number		 */		public function set scrollHeight(val : Number) : void {			_scollHeightSetFlag = true;			_scollHeight = val;		}		public function get scrollHeight() : Number {			return _scollHeight;		}		/**		 * @method backgroundColour		 * @tooltip get / set the background colour		 * @param val		 */		public function get backgroundColour() : uint {			return _backgroundColour;		}		public function set backgroundColour(backgroundColour : uint) : void {			_backgroundColour = backgroundColour;			draw();		}		/**		 * @method backgroundAlpha		 * @tooltip get / set the background alpha value		 * @param val		 */		public function get backgroundAlpha() : Number {			return _backgroundAlpha;		}		public function set backgroundAlpha(backgroundAlpha : Number) : void {			_backgroundAlpha = backgroundAlpha;			draw();		}		/**		 * @method 		 * @tooltip 		 * @param val		 */		public function get useAnimation() : Boolean {			return _useAnimation;		}		public function set useAnimation(useAnimation : Boolean) : void {			_useAnimation = useAnimation;		}		/**		 * @method animationDuration		 * @tooltip duration of scroll tween		 * @param val : Number in milliseconds		 */		public function get animationDuration() : Number {			return _animationDuration;		}		public function set animationDuration(animationDuration : Number) : void {			_animationDuration = animationDuration;		}		public function set scrollPolicy(value : Boolean) : void {			_scrollPolicy = value;		}		public function get scrollPolicy() : Boolean {			return _scrollPolicy;		}		// ------------------------------------------------------------------------------		// Compatible with flash 9 / 10 AS3 Syntax.		// ------------------------------------------------------------------------------				/**		 * @method scroll		 * @tooltip get / set the horizontal scroll positions		 */		public function set scrollH(v : Number) : void {			hscroll = v;		}		public function get scrollH() : Number {			return hscroll;		}		/**		 * @method scroll		 * @tooltip get / set the vertical scroll positions		 */		public function set scrollV(v : Number) : void {			scroll = v;		}		public function get scrollV() : Number {			return scroll;		}		/**		 * @method scroll		 * @tooltip get maximum horizontal scroll position		 */		public function get maxScrollH() : Number {			return maxhscroll;		}		/**		 * @method scroll		 * @tooltip get maximum vertical scroll position		 */		public function get maxScrollV() : Number {			return maxscroll;		}		// ------------------------------------------------------------------------------		// Backward Compatibility with old AS2 Syntax		// ------------------------------------------------------------------------------				/**		 * @method scroll		 * @tooltip get / set the scroll positions		 */		public function get scroll() : Number {			return _scroll;		}		public function set scroll(val : Number) : void {			// pre-calc target position			var targetPos : Number ;			// check the value is within bounds			if (( val >= 0 ) && ( val <= _scrollmax )) {				// make sure the value is in range				targetPos = ( val );				// + __scollHeight			} else if ( val >= _scrollmax ) {				// if we are over				targetPos = ( _scrollmax );			} else if ( val < 0 ) {				// if we are under				targetPos = 0;			}			// assign the scroll position after it has been filtered			_scroll = targetPos;			// move the scroll object			if ( _useAnimation ) {				// animated scroll				var tweenProps : Object = new Object();				tweenProps.y = Math.round(targetPos * -1);				TweenMax.to(_contentTargetMC, _animationDuration, tweenProps);			} else {				// non-animated scroll				_contentTargetMC.y = Math.round(targetPos * -1);			}		};		/**		 * @method maxscroll		 * @tooltip get the maximum scroll position		 * @param val : Number		 */		public function get maxscroll() : Number {			return _scrollmax;		}		/**		 * @method hscroll		 * @tooltip get/set the maximum horizontal scroll position		 * @param val : Number		 */		public function get hscroll() : Number {			return _scrollh;		}		public function set hscroll(val : Number) : void {			// check the value is within range			if (( val >= 0 ) && ( val <= _scrollhmax )) {				// move the movieclip				_contentTargetMC.x = ( -1 * val );				// set the value				_scrollh = val;			}		}		/**		 * @method maxhscroll		 * @tooltip get the maximum horizontal scroll value		 * @param val : Number		 */		public function get maxhscroll() : Number {			return _scrollhmax ;		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method AddedToStage( e : Event )		 * @tooltip added to stage event handler		 * @param val : Event		 */		private function AddedToStage(e : Event) : void {			// set the added to stage flag			_addedToStageFlag = true;			init();			// check if there is content that needs to be attached			if ( _attachContentFlag && _contentReference != null ) {				// and attach it				attachMovie(_contentReference);				_attachContentFlag = false;			}			// add event listener for the mouse wheeel			addEventListener(MouseEvent.MOUSE_WHEEL, MouseWheelHandler, false, 0, true);			removeEventListener(Event.ADDED_TO_STAGE, AddedToStage);			draw();		}		/**		 * @method MouseWheelHandler( e : MouseEvent ) 		 * @tooltip mouse wheel event handler		 * @param val : MouseEvent		 */		private function MouseWheelHandler(e : MouseEvent) : void {			if ( !_scrollPolicy ) return;			if (mouseX >= 0 && mouseX < width && mouseY >= 0 && mouseY < height) {				scroll -= e.delta * ScrollPane.MOUSEWHEELSTEP;			}		}	}}