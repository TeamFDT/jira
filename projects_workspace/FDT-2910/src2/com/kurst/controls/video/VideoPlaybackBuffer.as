/******************************************************************************************************************************************************************************** *  * Class Name  	:  * Version 	  	:  * Description 	:  *  ******************************************************************************************************************************************************************************** *  * Author 		:  * Date 			:  *  ******************************************************************************************************************************************************************************** *  * METHODS *  * * PROPERTIES *  * * EVENTS *  *  ******************************************************************************************************************************************************************************** * 				: * * ********************************************************************************************************************************************************************************* * NOTES			: -default-background-color #000000 **********************************************************************************************************************************************************************************/package com.kurst.controls.video {	import flash.events.EventDispatcher;	import com.kurst.controls.video.events.VideoBufferEvent;	import flash.display.MovieClip;	import flash.display.Loader;	import com.kurst.utils.NetTimer;	public class VideoPlaybackBuffer extends EventDispatcher {		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				private var timer 							: NetTimer;		private var FPS 							: Number;		private var initialFramesLoaded 			: Number;		private var playTime 						: Number;		private var initialized 					: Boolean;		private var initFlag 						: Boolean;		private var bufferLoadedFlag 				: Boolean = false;		private var _percentageToLoadUntilStream 	: Number = .4;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				public function VideoPlaybackBuffer() {			timer = new NetTimer();			bufferLoadedFlag = false;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function startLoad(fps : Number) : void {			initialized = false;			initFlag = false;			FPS = fps;			timer.start();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function onUpdate(loader : Loader) : void {			var content : MovieClip = loader.content as MovieClip;			if ( content == null ) return;			playTime = content.totalFrames / FPS ;			if ( !bufferLoadedFlag ) {				if ( !initFlag ) {					// first init run					initFlag = true ;					initialFramesLoaded = content.framesLoaded ;				} else {					// buffering algorithm					// --------------------------------------------------------------------------------					// var totalPercentage			: Number	= Math.round( 100 - ( ( bytestotal - bytesloaded ) / bytestotal ) * 100 );					// var loadedTime				: Number 	= content.framesLoaded / FPS ;					// var timeExpired				: Number 	= ( getTimer() - startTime ) / 1000 ;					// var framesAlreadyLoadedOffset : Number 	= ( initialFramesLoaded * ( 1 / FPS ) )	;					// --------------------------------------------------------------------------------					var bufferEvent : VideoBufferEvent;					var bytesloaded : Number = loader.contentLoaderInfo.bytesLoaded;					var bytestotal : Number = loader.contentLoaderInfo.bytesTotal;					var totalPlayTime : Number = Math.round(content.totalFrames / FPS);					var playTimeToLoad : Number = Math.round(( content.totalFrames - content.framesLoaded ) / FPS);					var loadingTimeRemaining : Number = timer.getRemainingTime(bytesloaded, bytestotal);					//					var playableTime : Number = totalPlayTime - playTimeToLoad;					var loadingTimeRemainingPercent : Number = loadingTimeRemaining - ( loadingTimeRemaining * _percentageToLoadUntilStream );					var estPercentage : Number = Math.min(100, Math.abs(Math.round(( 1 - ( loadingTimeRemainingPercent - playableTime ) / loadingTimeRemainingPercent ) * 100))) / 100 ;					if ( (  playableTime > loadingTimeRemainingPercent ) && ( loadingTimeRemaining != 0 ) ) {						// if the target is ready to be streamed						bufferEvent = new VideoBufferEvent(VideoBufferEvent.BUFFER_PROGRESS);						bufferEvent.progress = 1;						dispatchEvent(bufferEvent);						dispatchEvent(new VideoBufferEvent(VideoBufferEvent.BUFFER_LOADED));						bufferLoadedFlag = true;					} else {						if ( playableTime > 1 ) {							if ( estPercentage == 1 ) estPercentage = 0;							bufferEvent = new VideoBufferEvent(VideoBufferEvent.BUFFER_PROGRESS);							bufferEvent.progress = estPercentage;							dispatchEvent(bufferEvent);						}					}				}			}		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -PRIVATE----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get bufferLoaded() : Boolean {			return bufferLoadedFlag;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get percentageToLoadUntilStream() : Number {			return _percentageToLoadUntilStream;		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function set percentageToLoadUntilStream(percentageToLoadUntilStream : Number) : void {			_percentageToLoadUntilStream = percentageToLoadUntilStream;		}		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------	}}