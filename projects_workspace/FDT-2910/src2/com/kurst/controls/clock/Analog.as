/******************************************************************************************************************************************************************************** *  * Class Name  	: com.kurst.controls.clock.Analog * Version 	  	: 1 * Description 	: Analog Clock Renderer *  ******************************************************************************************************************************************************************************** *  * Author 		: Kb * Date 			: 08/07/09 *  ******************************************************************************************************************************************************************************** *  * METHODS *  *		resume *		start *		pause * * PROPERTIES * *		delay() : Number *		minuteHand() : MovieClip *		hourHand() : MovieClip *		secondHand() : MovieClip * * EVENTS *  *  **********************************************************************************************************************************************************************************/package com.kurst.controls.clock {	import flash.display.Sprite;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.display.MovieClip;	public class Analog extends Sprite {				// ------------------------------------------------------------------------------------------------------------------------------------------------------------				private var t 			: Timer;		private var _secondHand : MovieClip;		private var _hourHand 	: MovieClip;		private var _minuteHand : MovieClip;		private var _delay 		: Number = 500;		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				function Analog() {			t = new Timer(_delay)			t.addEventListener(TimerEvent.TIMER, OnTimerEvent, false, 0, true);		}		// -PUBLIC-----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// PPPPPP  UU   UU BBBBBB  LL      IIIIII  CCCCC		// PP   PP UU   UU BB   BB LL        II   CC   CC		// PPPPPP  UU   UU BBBBBB  LL        II   CC		// PP      UU   UU BB   BB LL        II   CC   CC		// PP       UUUUU  BBBBBB  LLLLLLL IIIIII  CCCCC		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function resume() : void {			t.start();			OnTimerEvent();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function start() : void {			t.start();			OnTimerEvent();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function pause() : void {			t.stop();		}		// -GET/SET----------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// GGGGG  EEEEEEE TTTTTT          SSSSS EEEEEEE TTTTTT		// GG      EE        TT           SS     EE        TT		// GG  GGG EEEE      TT            SSSS  EEEE      TT		// GG   GG EE        TT               SS EE        TT		// GGGGG  EEEEEEE   TT           SSSSS  EEEEEEE   TT		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get delay() : Number {			return _delay;		}		public function set delay(d : Number) : void {			_delay = d;			t.removeEventListener(TimerEvent.TIMER, OnTimerEvent);			t.stop();			t = new Timer(_delay)			t.addEventListener(TimerEvent.TIMER, OnTimerEvent, false, 0, true);		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get minuteHand() : MovieClip {			return _minuteHand;		}		public function set minuteHand(minuteHand : MovieClip) : void {			_minuteHand = minuteHand;			OnTimerEvent();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get hourHand() : MovieClip {			return _hourHand;		}		public function set hourHand(hourHand : MovieClip) : void {			_hourHand = hourHand;			OnTimerEvent();		}		/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		public function get secondHand() : MovieClip {			return _secondHand;		}		public function set secondHand(secondHand : MovieClip) : void {			_secondHand = secondHand;			OnTimerEvent();		}		// -EVENT HANDLERS-------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		//		// EEEEEEE V     V EEEEEEE NN  NN TTTTTT         HH   HH   AAA   NN  NN DDDDDD  LL      EEEEEEE RRRRR    SSSSS		// EE      V     V EE      NNN NN   TT           HH   HH  AAAAA  NNN NN DD   DD LL      EE      RR  RR  SS		// EEEE     V   V  EEEE    NNNNNN   TT           HHHHHHH AA   AA NNNNNN DD   DD LL      EEEE    RRRRR    SSSS		// EE        V V   EE      NN NNN   TT           HH   HH AAAAAAA NN NNN DD   DD LL      EE      RR  RR      SS		// EEEEEEE    V    EEEEEEE NN  NN   TT           HH   HH AA   AA NN  NN DDDDDD  LLLLLLL EEEEEEE RR   RR SSSSS		//		// ------------------------------------------------------------------------------------------------------------------------------------------------------------		// ------------------------------------------------------------------------------------------------------------------------------------------------------------				/**		 * @method 		 * @tooltip		 * @param		 * @return		 */		private function OnTimerEvent(e : TimerEvent = null) : void {			var currentDate : Date = new Date();			if ( _hourHand != null )				_hourHand.rotation = currentDate.getHours() * 30 + ( currentDate.getMinutes() / 2 );			if ( _minuteHand != null )				_minuteHand.rotation = currentDate.getMinutes() * 6 + ( currentDate.getSeconds() / 10 );			if ( _secondHand != null )				_secondHand.rotation = currentDate.getSeconds() * 6;		}	}}