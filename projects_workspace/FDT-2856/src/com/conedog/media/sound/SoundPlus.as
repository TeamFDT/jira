/*	BLOC Lib for ActionScript 3.0	Copyright (c) 2009, The Bloc Development Team*/package com.conedog.media.sound {	import com.greensock.TweenLite;	import com.greensock.easing.Sine;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	/*	SoundPlus is a wrapper for flash's sound class that adds more functionality 		and makes sounds much easier to use within flash				@author Mat Groves		@version 03/01/09		@example			<code>				package {					import com.bloc.media.sound										public class MyExample extends MovieClip {						public var mySound:SoundPlus;												public function MyExample() {							super();														mySound = new SoundPlus("soundInMyLibrary");							mySound.start(1, 0);														mySound.volume = 0.4;						}					}				}			</code>	*/	public class SoundPlus extends EventDispatcher	{						// P R O P E R T I E S //				protected var isDisposed								:Boolean = false;					protected var sound									:Sound;		protected var _volume								:Number = 1;		protected var _masterVolume							:Number = 1;				protected var soundChannel							:SoundChannel;		protected var soundTransform						:SoundTransform;				protected var _isStopped							:Boolean = true;				public var restartIfPlaying							:Boolean = true;				private var firstRun								:Boolean = true;		// G E T T E R S   /   S E T T E R S //				/* 			Indicates the current volume of the sound 		*/		public function get volume():Number{ return _volume; }				/* 			Sets the volume of the sound (this master volume is independent from this main volume)		*/		public function set volume(n:Number):void		{			if(isDisposed)return;						_volume = n;			soundTransform.volume = n * _masterVolume;			if(soundChannel)soundChannel.soundTransform = soundTransform;		}				/* 			Indicates the current panning of the sound 		*/		public function get pan():Number{ return soundTransform.pan; }				/* 			Sets the panning of the sound left - right		*/		public function set pan(n:Number):void		{			if(isDisposed)return;						soundTransform.pan = n;			if(soundChannel)soundChannel.soundTransform = soundTransform;		}				/* 			Sets the master volume of the sound (this master volume is independent from the main volume)		*/		public function get masterVolume():Number{ return _masterVolume;}				/* 			Sets the master volume of the sound (this master volume is independent from the main volume)		*/		public function set masterVolume(n:Number):void		{			_masterVolume = n;			soundTransform.volume = n * _volume;			if(soundChannel)soundChannel.soundTransform = soundTransform;		}				/* 			Indicates if the sound is currently playing is is stopped		*/		public function get isStopped():Boolean		{			return _isStopped;		}				// C O N S T R U C T O R //				/* 			Creates Sound Plus						@param id:		The id of the sound in the swfs library or location of the sound to be streamed			@param domain:	The domain that is to be used useful for accessing sound from different swf			@param stream:	If set to true the sound will be loaded externaly			*/		public function SoundPlus(id:String, volume:Number = 1, restartIfPlaying:Boolean = true, domain:ApplicationDomain = null, stream:Boolean = false):void		{			_masterVolume = volume;			this.restartIfPlaying = restartIfPlaying;			if(!stream)			{				domain = (domain) ? domain : ApplicationDomain.currentDomain;				sound = new (domain.getDefinition(id))();				}			else			{				sound = new Sound(new URLRequest(id));				sound.addEventListener(Event.COMPLETE, onStreamLoaded, false, 0, true);				sound.addEventListener(ProgressEvent.PROGRESS, onStreamProgress, false, 0, true);			}						soundTransform = new SoundTransform();		}							// P U B L I C //				/* 			This function tweens the volume of the sound to a new target volume						@param v:		the new volume to tween to			@param speed:	the duration of the tween			*/		public function fadeTo(v:Number = 1, speed:Number = 1):void		{			if(isDisposed)return;			TweenLite.to(this, speed, {volume:v, ease:Sine.easeOut});	//		Tweener.tween(this, "volume", v, speed, "easeOutSine", 0);		}				/* 			This function tweens the volume of the sound to 0 and then stops it						@param speed:	the duration of the fade out			*/		public function fadeOut(speed:Number = 0.5):void		{			if(isDisposed)return;			TweenLite.to(this, speed, {volume:0, ease:Sine.easeOut, onComplete:onFadedOut});	//		Tweener.tween(this, "volume", 0, speed, "easeOutSine", 0, {onFinish:onFadedOut} );		}				/* 			This function starts a sound and also fades it in from 0 to a new volume						@param v:		the new volume to tween to			@param looping:	the number of times that the sound will loop 0 = infinate				@param speed:	the duration of the fade in			*/		public function startfadeIn(v:Number, looping:int = 0, speed:Number = 0.5):void		{			if(isDisposed)return;						start(0, looping);			TweenLite.to(this, speed, {volume:v, ease:Sine.easeOut});			//Tweener.tween(this, "volume", v, speed, "easeOutSine", 0);		}				/* 			This function starts a sound						@param v:		the new volume to tween to			@param looping:	the number of times that the sound will loop 0 = infinate		*/		public function start(v:Number = 1, looping:int = 0):void		{			if(isDisposed)return;						if(restartIfPlaying || _isStopped)			{				if(soundChannel)soundChannel.stop();												soundChannel = sound.play(0, looping);									soundChannel.addEventListener(Event.SOUND_COMPLETE, onSoundFinished, false, 0, true);				volume = v;				_isStopped = false;			}		}				/* 			This function stops a sound it can be started again		*/		public function stop():void		{			if(isDisposed)return;						if(_isStopped)return;						if(soundChannel)soundChannel.stop();			_isStopped = true;			dispatchEvent(new Event(Event.COMPLETE));		}				/* 			This function disposes a sound. Once this function has been called			the sound is no longer usable.		*/		public function dispose():void		{			if(isDisposed)return;						stop();								try			{				sound.close();			}			catch(e:Error)			{							}						sound = null;			soundChannel = null;			soundTransform = null;		}				// H A N D L E R S //						protected function onFadedOut():void		{			stop();		}				protected function onSoundFinished(e:Event):void		{			stop();		}				protected function onStreamLoaded(e:Event):void		{			//trace("L O A D E D");		}				protected function onStreamProgress(e:ProgressEvent):void		{			if(firstRun)			{				if(!sound.isBuffering)				{					dispatchEvent(new Event("SoundReady"));					firstRun = false;				}			}			//trace(e.bytesLoaded / e.bytesTotal);		}			}}